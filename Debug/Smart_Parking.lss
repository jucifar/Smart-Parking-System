
Smart_Parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000216  00800060  00002c2c  00002cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800276  00800276  00002ed6  2**0
                  ALLOC
  3 .stab         00002514  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001011  00000000  00000000  000053ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000063fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000659d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000678f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b0f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <main>
      8a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ed 15 	jmp	0x2bda	; 0x2bda <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e5 15 	jmp	0x2bca	; 0x2bca <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 58       	subi	r30, 0x8A	; 138
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_VidSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


/*Setting pin direction, make a specific pin is an input or output*/
void DIO_VidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	27 97       	sbiw	r28, 0x07	; 7
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02
     e46:	4b 83       	std	Y+3, r20	; 0x03
if(Copy_u8Direction==Input)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 23       	and	r24, r24
     e4c:	09 f0       	breq	.+2      	; 0xe50 <DIO_VidSetPinDirection+0x22>
     e4e:	74 c0       	rjmp	.+232    	; 0xf38 <DIO_VidSetPinDirection+0x10a>
  {
	switch(Copy_u8Port)
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	3f 83       	std	Y+7, r19	; 0x07
     e58:	2e 83       	std	Y+6, r18	; 0x06
     e5a:	8e 81       	ldd	r24, Y+6	; 0x06
     e5c:	9f 81       	ldd	r25, Y+7	; 0x07
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	59 f1       	breq	.+86     	; 0xeba <DIO_VidSetPinDirection+0x8c>
     e64:	2e 81       	ldd	r18, Y+6	; 0x06
     e66:	3f 81       	ldd	r19, Y+7	; 0x07
     e68:	22 30       	cpi	r18, 0x02	; 2
     e6a:	31 05       	cpc	r19, r1
     e6c:	2c f4       	brge	.+10     	; 0xe78 <DIO_VidSetPinDirection+0x4a>
     e6e:	8e 81       	ldd	r24, Y+6	; 0x06
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f0       	breq	.+26     	; 0xe90 <DIO_VidSetPinDirection+0x62>
     e76:	d2 c0       	rjmp	.+420    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
     e78:	2e 81       	ldd	r18, Y+6	; 0x06
     e7a:	3f 81       	ldd	r19, Y+7	; 0x07
     e7c:	22 30       	cpi	r18, 0x02	; 2
     e7e:	31 05       	cpc	r19, r1
     e80:	89 f1       	breq	.+98     	; 0xee4 <DIO_VidSetPinDirection+0xb6>
     e82:	8e 81       	ldd	r24, Y+6	; 0x06
     e84:	9f 81       	ldd	r25, Y+7	; 0x07
     e86:	83 30       	cpi	r24, 0x03	; 3
     e88:	91 05       	cpc	r25, r1
     e8a:	09 f4       	brne	.+2      	; 0xe8e <DIO_VidSetPinDirection+0x60>
     e8c:	40 c0       	rjmp	.+128    	; 0xf0e <DIO_VidSetPinDirection+0xe0>
     e8e:	c6 c0       	rjmp	.+396    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
	{
		case Port_A  : CLR_BIT(DDRA ,Copy_u8Pin );break;
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_VidSetPinDirection+0x80>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <DIO_VidSetPinDirection+0x7c>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	b1 c0       	rjmp	.+354    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
		case Port_B  : CLR_BIT(DDRB ,Copy_u8Pin );break;
     eba:	a7 e3       	ldi	r26, 0x37	; 55
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e7 e3       	ldi	r30, 0x37	; 55
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_VidSetPinDirection+0xaa>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_VidSetPinDirection+0xa6>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
     ee2:	9c c0       	rjmp	.+312    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
        case Port_C  : CLR_BIT(DDRC ,Copy_u8Pin );break;
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_VidSetPinDirection+0xd4>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_VidSetPinDirection+0xd0>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	87 c0       	rjmp	.+270    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
        case Port_D  : CLR_BIT(DDRD ,Copy_u8Pin );break;
     f0e:	a1 e3       	ldi	r26, 0x31	; 49
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e1 e3       	ldi	r30, 0x31	; 49
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_VidSetPinDirection+0xfe>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_VidSetPinDirection+0xfa>
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8c 93       	st	X, r24
     f36:	72 c0       	rjmp	.+228    	; 0x101c <DIO_VidSetPinDirection+0x1ee>

	}
  }	
else if (Copy_u8Direction==Output)
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	09 f0       	breq	.+2      	; 0xf40 <DIO_VidSetPinDirection+0x112>
     f3e:	6e c0       	rjmp	.+220    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
  {
	switch(Copy_u8Port)
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	3d 83       	std	Y+5, r19	; 0x05
     f48:	2c 83       	std	Y+4, r18	; 0x04
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	91 05       	cpc	r25, r1
     f52:	49 f1       	breq	.+82     	; 0xfa6 <DIO_VidSetPinDirection+0x178>
     f54:	2c 81       	ldd	r18, Y+4	; 0x04
     f56:	3d 81       	ldd	r19, Y+5	; 0x05
     f58:	22 30       	cpi	r18, 0x02	; 2
     f5a:	31 05       	cpc	r19, r1
     f5c:	2c f4       	brge	.+10     	; 0xf68 <DIO_VidSetPinDirection+0x13a>
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	61 f0       	breq	.+24     	; 0xf7e <DIO_VidSetPinDirection+0x150>
     f66:	5a c0       	rjmp	.+180    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
     f68:	2c 81       	ldd	r18, Y+4	; 0x04
     f6a:	3d 81       	ldd	r19, Y+5	; 0x05
     f6c:	22 30       	cpi	r18, 0x02	; 2
     f6e:	31 05       	cpc	r19, r1
     f70:	71 f1       	breq	.+92     	; 0xfce <DIO_VidSetPinDirection+0x1a0>
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	91 05       	cpc	r25, r1
     f7a:	e9 f1       	breq	.+122    	; 0xff6 <DIO_VidSetPinDirection+0x1c8>
     f7c:	4f c0       	rjmp	.+158    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
	{
		case Port_A  : SET_BIT(DDRA ,Copy_u8Pin );break;
     f7e:	aa e3       	ldi	r26, 0x3A	; 58
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	ea e3       	ldi	r30, 0x3A	; 58
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	48 2f       	mov	r20, r24
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <DIO_VidSetPinDirection+0x16e>
     f98:	88 0f       	add	r24, r24
     f9a:	99 1f       	adc	r25, r25
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <DIO_VidSetPinDirection+0x16a>
     fa0:	84 2b       	or	r24, r20
     fa2:	8c 93       	st	X, r24
     fa4:	3b c0       	rjmp	.+118    	; 0x101c <DIO_VidSetPinDirection+0x1ee>
		case Port_B  : SET_BIT(DDRB ,Copy_u8Pin );break;
     fa6:	a7 e3       	ldi	r26, 0x37	; 55
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e7 e3       	ldi	r30, 0x37	; 55
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_VidSetPinDirection+0x196>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_VidSetPinDirection+0x192>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
     fcc:	27 c0       	rjmp	.+78     	; 0x101c <DIO_VidSetPinDirection+0x1ee>
        case Port_C  : SET_BIT(DDRC ,Copy_u8Pin );break;
     fce:	a4 e3       	ldi	r26, 0x34	; 52
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e4 e3       	ldi	r30, 0x34	; 52
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	48 2f       	mov	r20, r24
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	02 2e       	mov	r0, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_VidSetPinDirection+0x1be>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	0a 94       	dec	r0
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_VidSetPinDirection+0x1ba>
     ff0:	84 2b       	or	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <DIO_VidSetPinDirection+0x1ee>
        case Port_D  : SET_BIT(DDRD ,Copy_u8Pin );break;
     ff6:	a1 e3       	ldi	r26, 0x31	; 49
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e1 e3       	ldi	r30, 0x31	; 49
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_VidSetPinDirection+0x1e6>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_VidSetPinDirection+0x1e2>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24

	}
  }
}
    101c:	27 96       	adiw	r28, 0x07	; 7
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <DIO_VidSetPinValue>:

/*Setting pin value, give a special value to specific pin */
void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	27 97       	sbiw	r28, 0x07	; 7
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	6a 83       	std	Y+2, r22	; 0x02
    1046:	4b 83       	std	Y+3, r20	; 0x03
if(Copy_u8Value==PinHigh)
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	09 f0       	breq	.+2      	; 0x1050 <DIO_VidSetPinValue+0x22>
    104e:	6f c0       	rjmp	.+222    	; 0x112e <DIO_VidSetPinValue+0x100>
  {
	switch(Copy_u8Port)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3f 83       	std	Y+7, r19	; 0x07
    1058:	2e 83       	std	Y+6, r18	; 0x06
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	9f 81       	ldd	r25, Y+7	; 0x07
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	91 05       	cpc	r25, r1
    1062:	49 f1       	breq	.+82     	; 0x10b6 <DIO_VidSetPinValue+0x88>
    1064:	2e 81       	ldd	r18, Y+6	; 0x06
    1066:	3f 81       	ldd	r19, Y+7	; 0x07
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	2c f4       	brge	.+10     	; 0x1078 <DIO_VidSetPinValue+0x4a>
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	61 f0       	breq	.+24     	; 0x108e <DIO_VidSetPinValue+0x60>
    1076:	d2 c0       	rjmp	.+420    	; 0x121c <DIO_VidSetPinValue+0x1ee>
    1078:	2e 81       	ldd	r18, Y+6	; 0x06
    107a:	3f 81       	ldd	r19, Y+7	; 0x07
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	71 f1       	breq	.+92     	; 0x10de <DIO_VidSetPinValue+0xb0>
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	91 05       	cpc	r25, r1
    108a:	e9 f1       	breq	.+122    	; 0x1106 <DIO_VidSetPinValue+0xd8>
    108c:	c7 c0       	rjmp	.+398    	; 0x121c <DIO_VidSetPinValue+0x1ee>
	{
		case Port_A  : SET_BIT(PORTA ,Copy_u8Pin );break;
    108e:	ab e3       	ldi	r26, 0x3B	; 59
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e3       	ldi	r30, 0x3B	; 59
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	48 2f       	mov	r20, r24
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	02 2e       	mov	r0, r18
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <DIO_VidSetPinValue+0x7e>
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	0a 94       	dec	r0
    10ae:	e2 f7       	brpl	.-8      	; 0x10a8 <DIO_VidSetPinValue+0x7a>
    10b0:	84 2b       	or	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	b3 c0       	rjmp	.+358    	; 0x121c <DIO_VidSetPinValue+0x1ee>
		case Port_B  : SET_BIT(PORTB ,Copy_u8Pin );break;
    10b6:	a8 e3       	ldi	r26, 0x38	; 56
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e8 e3       	ldi	r30, 0x38	; 56
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_VidSetPinValue+0xa6>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_VidSetPinValue+0xa2>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	9f c0       	rjmp	.+318    	; 0x121c <DIO_VidSetPinValue+0x1ee>
        case Port_C  : SET_BIT(PORTC ,Copy_u8Pin );break;
    10de:	a5 e3       	ldi	r26, 0x35	; 53
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e3       	ldi	r30, 0x35	; 53
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_VidSetPinValue+0xce>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_VidSetPinValue+0xca>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	8b c0       	rjmp	.+278    	; 0x121c <DIO_VidSetPinValue+0x1ee>
        case Port_D  : SET_BIT(PORTD ,Copy_u8Pin );break;
    1106:	a2 e3       	ldi	r26, 0x32	; 50
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e2 e3       	ldi	r30, 0x32	; 50
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_VidSetPinValue+0xf6>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_VidSetPinValue+0xf2>
    1128:	84 2b       	or	r24, r20
    112a:	8c 93       	st	X, r24
    112c:	77 c0       	rjmp	.+238    	; 0x121c <DIO_VidSetPinValue+0x1ee>

	}
  }	
else if (Copy_u8Value==PinLow)
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	88 23       	and	r24, r24
    1132:	09 f0       	breq	.+2      	; 0x1136 <DIO_VidSetPinValue+0x108>
    1134:	73 c0       	rjmp	.+230    	; 0x121c <DIO_VidSetPinValue+0x1ee>
  {
	switch(Copy_u8Port){
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	59 f1       	breq	.+86     	; 0x11a0 <DIO_VidSetPinValue+0x172>
    114a:	2c 81       	ldd	r18, Y+4	; 0x04
    114c:	3d 81       	ldd	r19, Y+5	; 0x05
    114e:	22 30       	cpi	r18, 0x02	; 2
    1150:	31 05       	cpc	r19, r1
    1152:	2c f4       	brge	.+10     	; 0x115e <DIO_VidSetPinValue+0x130>
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	69 f0       	breq	.+26     	; 0x1176 <DIO_VidSetPinValue+0x148>
    115c:	5f c0       	rjmp	.+190    	; 0x121c <DIO_VidSetPinValue+0x1ee>
    115e:	2c 81       	ldd	r18, Y+4	; 0x04
    1160:	3d 81       	ldd	r19, Y+5	; 0x05
    1162:	22 30       	cpi	r18, 0x02	; 2
    1164:	31 05       	cpc	r19, r1
    1166:	89 f1       	breq	.+98     	; 0x11ca <DIO_VidSetPinValue+0x19c>
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	91 05       	cpc	r25, r1
    1170:	09 f4       	brne	.+2      	; 0x1174 <DIO_VidSetPinValue+0x146>
    1172:	40 c0       	rjmp	.+128    	; 0x11f4 <DIO_VidSetPinValue+0x1c6>
    1174:	53 c0       	rjmp	.+166    	; 0x121c <DIO_VidSetPinValue+0x1ee>
		case Port_A  : CLR_BIT(PORTA ,Copy_u8Pin );break;
    1176:	ab e3       	ldi	r26, 0x3B	; 59
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	48 2f       	mov	r20, r24
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	02 2e       	mov	r0, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_VidSetPinValue+0x166>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	0a 94       	dec	r0
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_VidSetPinValue+0x162>
    1198:	80 95       	com	r24
    119a:	84 23       	and	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	3e c0       	rjmp	.+124    	; 0x121c <DIO_VidSetPinValue+0x1ee>
		case Port_B  : CLR_BIT(PORTB ,Copy_u8Pin );break;
    11a0:	a8 e3       	ldi	r26, 0x38	; 56
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e8 e3       	ldi	r30, 0x38	; 56
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <DIO_VidSetPinValue+0x190>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <DIO_VidSetPinValue+0x18c>
    11c2:	80 95       	com	r24
    11c4:	84 23       	and	r24, r20
    11c6:	8c 93       	st	X, r24
    11c8:	29 c0       	rjmp	.+82     	; 0x121c <DIO_VidSetPinValue+0x1ee>
        case Port_C  : CLR_BIT(PORTC ,Copy_u8Pin );break;
    11ca:	a5 e3       	ldi	r26, 0x35	; 53
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e3       	ldi	r30, 0x35	; 53
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_VidSetPinValue+0x1ba>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_VidSetPinValue+0x1b6>
    11ec:	80 95       	com	r24
    11ee:	84 23       	and	r24, r20
    11f0:	8c 93       	st	X, r24
    11f2:	14 c0       	rjmp	.+40     	; 0x121c <DIO_VidSetPinValue+0x1ee>
        case Port_D  : CLR_BIT(PORTD ,Copy_u8Pin );break;
    11f4:	a2 e3       	ldi	r26, 0x32	; 50
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e2 e3       	ldi	r30, 0x32	; 50
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <DIO_VidSetPinValue+0x1e4>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <DIO_VidSetPinValue+0x1e0>
    1216:	80 95       	com	r24
    1218:	84 23       	and	r24, r20
    121a:	8c 93       	st	X, r24

	}
  }
}
    121c:	27 96       	adiw	r28, 0x07	; 7
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <DIO_VidGetPinValue>:


/*Getting pin value, check the value of specific pin and store this value into *Data */
void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *pu8Data)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	00 d0       	rcall	.+0      	; 0x1234 <DIO_VidGetPinValue+0x6>
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_VidGetPinValue+0x8>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_VidGetPinValue+0xa>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	6a 83       	std	Y+2, r22	; 0x02
    1240:	5c 83       	std	Y+4, r21	; 0x04
    1242:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8Port)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3e 83       	std	Y+6, r19	; 0x06
    124c:	2d 83       	std	Y+5, r18	; 0x05
    124e:	4d 81       	ldd	r20, Y+5	; 0x05
    1250:	5e 81       	ldd	r21, Y+6	; 0x06
    1252:	41 30       	cpi	r20, 0x01	; 1
    1254:	51 05       	cpc	r21, r1
    1256:	59 f1       	breq	.+86     	; 0x12ae <DIO_VidGetPinValue+0x80>
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	91 05       	cpc	r25, r1
    1260:	34 f4       	brge	.+12     	; 0x126e <DIO_VidGetPinValue+0x40>
    1262:	2d 81       	ldd	r18, Y+5	; 0x05
    1264:	3e 81       	ldd	r19, Y+6	; 0x06
    1266:	21 15       	cp	r18, r1
    1268:	31 05       	cpc	r19, r1
    126a:	69 f0       	breq	.+26     	; 0x1286 <DIO_VidGetPinValue+0x58>
    126c:	5b c0       	rjmp	.+182    	; 0x1324 <DIO_VidGetPinValue+0xf6>
    126e:	4d 81       	ldd	r20, Y+5	; 0x05
    1270:	5e 81       	ldd	r21, Y+6	; 0x06
    1272:	42 30       	cpi	r20, 0x02	; 2
    1274:	51 05       	cpc	r21, r1
    1276:	79 f1       	breq	.+94     	; 0x12d6 <DIO_VidGetPinValue+0xa8>
    1278:	8d 81       	ldd	r24, Y+5	; 0x05
    127a:	9e 81       	ldd	r25, Y+6	; 0x06
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	91 05       	cpc	r25, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <DIO_VidGetPinValue+0x56>
    1282:	3d c0       	rjmp	.+122    	; 0x12fe <DIO_VidGetPinValue+0xd0>
    1284:	4f c0       	rjmp	.+158    	; 0x1324 <DIO_VidGetPinValue+0xf6>
	{
		case Port_A  :  *pu8Data=GET_BIT(PINA ,Copy_u8Pin );break;
    1286:	e9 e3       	ldi	r30, 0x39	; 57
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	88 2f       	mov	r24, r24
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a9 01       	movw	r20, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_VidGetPinValue+0x70>
    129a:	55 95       	asr	r21
    129c:	47 95       	ror	r20
    129e:	8a 95       	dec	r24
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_VidGetPinValue+0x6c>
    12a2:	ca 01       	movw	r24, r20
    12a4:	81 70       	andi	r24, 0x01	; 1
    12a6:	eb 81       	ldd	r30, Y+3	; 0x03
    12a8:	fc 81       	ldd	r31, Y+4	; 0x04
    12aa:	80 83       	st	Z, r24
    12ac:	3b c0       	rjmp	.+118    	; 0x1324 <DIO_VidGetPinValue+0xf6>
		case Port_B  :  *pu8Data=GET_BIT(PINB ,Copy_u8Pin );break;
    12ae:	e6 e3       	ldi	r30, 0x36	; 54
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	a9 01       	movw	r20, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_VidGetPinValue+0x98>
    12c2:	55 95       	asr	r21
    12c4:	47 95       	ror	r20
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_VidGetPinValue+0x94>
    12ca:	ca 01       	movw	r24, r20
    12cc:	81 70       	andi	r24, 0x01	; 1
    12ce:	eb 81       	ldd	r30, Y+3	; 0x03
    12d0:	fc 81       	ldd	r31, Y+4	; 0x04
    12d2:	80 83       	st	Z, r24
    12d4:	27 c0       	rjmp	.+78     	; 0x1324 <DIO_VidGetPinValue+0xf6>
        case Port_C  :  *pu8Data=GET_BIT(PINC ,Copy_u8Pin );break;
    12d6:	e3 e3       	ldi	r30, 0x33	; 51
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	88 2f       	mov	r24, r24
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a9 01       	movw	r20, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_VidGetPinValue+0xc0>
    12ea:	55 95       	asr	r21
    12ec:	47 95       	ror	r20
    12ee:	8a 95       	dec	r24
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_VidGetPinValue+0xbc>
    12f2:	ca 01       	movw	r24, r20
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	eb 81       	ldd	r30, Y+3	; 0x03
    12f8:	fc 81       	ldd	r31, Y+4	; 0x04
    12fa:	80 83       	st	Z, r24
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <DIO_VidGetPinValue+0xf6>
        case Port_D  :  *pu8Data=GET_BIT(PIND ,Copy_u8Pin );break;
    12fe:	e0 e3       	ldi	r30, 0x30	; 48
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_VidGetPinValue+0xe8>
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	8a 95       	dec	r24
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_VidGetPinValue+0xe4>
    131a:	ca 01       	movw	r24, r20
    131c:	81 70       	andi	r24, 0x01	; 1
    131e:	eb 81       	ldd	r30, Y+3	; 0x03
    1320:	fc 81       	ldd	r31, Y+4	; 0x04
    1322:	80 83       	st	Z, r24

	}
}	
    1324:	26 96       	adiw	r28, 0x06	; 6
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <DIO_VidSetPortDirection>:



/*Setting Port direction register, make the whole port set(1) or clr(0) */
void DIO_VidSetPortDirection(u8 Copy_u8Port, u8 Copy_u8DirectionValue)
{  switch(Copy_u8Port)
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <DIO_VidSetPortDirection+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <DIO_VidSetPortDirection+0x8>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	6a 83       	std	Y+2, r22	; 0x02
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3c 83       	std	Y+4, r19	; 0x04
    134e:	2b 83       	std	Y+3, r18	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	d1 f0       	breq	.+52     	; 0x138e <DIO_VidSetPortDirection+0x58>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	2c f4       	brge	.+10     	; 0x136e <DIO_VidSetPortDirection+0x38>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	00 97       	sbiw	r24, 0x00	; 0
    136a:	61 f0       	breq	.+24     	; 0x1384 <DIO_VidSetPortDirection+0x4e>
    136c:	1e c0       	rjmp	.+60     	; 0x13aa <DIO_VidSetPortDirection+0x74>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	22 30       	cpi	r18, 0x02	; 2
    1374:	31 05       	cpc	r19, r1
    1376:	81 f0       	breq	.+32     	; 0x1398 <DIO_VidSetPortDirection+0x62>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	83 30       	cpi	r24, 0x03	; 3
    137e:	91 05       	cpc	r25, r1
    1380:	81 f0       	breq	.+32     	; 0x13a2 <DIO_VidSetPortDirection+0x6c>
    1382:	13 c0       	rjmp	.+38     	; 0x13aa <DIO_VidSetPortDirection+0x74>
	{
		case Port_A  : DDRA=Copy_u8DirectionValue;break;
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	80 83       	st	Z, r24
    138c:	0e c0       	rjmp	.+28     	; 0x13aa <DIO_VidSetPortDirection+0x74>
		case Port_B  : DDRB=Copy_u8DirectionValue;break;
    138e:	e7 e3       	ldi	r30, 0x37	; 55
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	80 83       	st	Z, r24
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <DIO_VidSetPortDirection+0x74>
        case Port_C  : DDRC=Copy_u8DirectionValue;break;
    1398:	e4 e3       	ldi	r30, 0x34	; 52
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	80 83       	st	Z, r24
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <DIO_VidSetPortDirection+0x74>
        case Port_D  : DDRD=Copy_u8DirectionValue;break;
    13a2:	e1 e3       	ldi	r30, 0x31	; 49
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 83       	st	Z, r24
					   
	}
  

}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <DIO_VidSetPortValue>:
/*Setting Port(Port register) value*/
void DIO_VidSetPortValue(u8 Copy_u8Port,u8 Copy_u8PortValue)
{  
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <DIO_VidSetPortValue+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <DIO_VidSetPortValue+0x8>
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	6a 83       	std	Y+2, r22	; 0x02
switch(Copy_u8Port)
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3c 83       	std	Y+4, r19	; 0x04
    13d0:	2b 83       	std	Y+3, r18	; 0x03
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	91 05       	cpc	r25, r1
    13da:	d1 f0       	breq	.+52     	; 0x1410 <DIO_VidSetPortValue+0x58>
    13dc:	2b 81       	ldd	r18, Y+3	; 0x03
    13de:	3c 81       	ldd	r19, Y+4	; 0x04
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	2c f4       	brge	.+10     	; 0x13f0 <DIO_VidSetPortValue+0x38>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	61 f0       	breq	.+24     	; 0x1406 <DIO_VidSetPortValue+0x4e>
    13ee:	1e c0       	rjmp	.+60     	; 0x142c <DIO_VidSetPortValue+0x74>
    13f0:	2b 81       	ldd	r18, Y+3	; 0x03
    13f2:	3c 81       	ldd	r19, Y+4	; 0x04
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 05       	cpc	r19, r1
    13f8:	81 f0       	breq	.+32     	; 0x141a <DIO_VidSetPortValue+0x62>
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	83 30       	cpi	r24, 0x03	; 3
    1400:	91 05       	cpc	r25, r1
    1402:	81 f0       	breq	.+32     	; 0x1424 <DIO_VidSetPortValue+0x6c>
    1404:	13 c0       	rjmp	.+38     	; 0x142c <DIO_VidSetPortValue+0x74>
	{
		case Port_A  : PORTA=Copy_u8PortValue;break;
    1406:	eb e3       	ldi	r30, 0x3B	; 59
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	80 83       	st	Z, r24
    140e:	0e c0       	rjmp	.+28     	; 0x142c <DIO_VidSetPortValue+0x74>
		case Port_B  : PORTB=Copy_u8PortValue;break;
    1410:	e8 e3       	ldi	r30, 0x38	; 56
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	80 83       	st	Z, r24
    1418:	09 c0       	rjmp	.+18     	; 0x142c <DIO_VidSetPortValue+0x74>
        case Port_C  : PORTC=Copy_u8PortValue;break;
    141a:	e5 e3       	ldi	r30, 0x35	; 53
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	80 83       	st	Z, r24
    1422:	04 c0       	rjmp	.+8      	; 0x142c <DIO_VidSetPortValue+0x74>
        case Port_D  : PORTD=Copy_u8PortValue;break;
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	80 83       	st	Z, r24
					   
	}
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <DIO_VidGetPortValue>:
/*Getting port value, check the value of specific port and store this value into *Data */
void DIO_VidGetPortValue(u8 Copy_u8Port, u8 *pu8Data)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_VidGetPortValue+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_VidGetPortValue+0x8>
    1442:	0f 92       	push	r0
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	7b 83       	std	Y+3, r23	; 0x03
    144c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3d 83       	std	Y+5, r19	; 0x05
    1456:	2c 83       	std	Y+4, r18	; 0x04
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	9d 81       	ldd	r25, Y+5	; 0x05
    145c:	81 30       	cpi	r24, 0x01	; 1
    145e:	91 05       	cpc	r25, r1
    1460:	e1 f0       	breq	.+56     	; 0x149a <DIO_VidGetPortValue+0x60>
    1462:	2c 81       	ldd	r18, Y+4	; 0x04
    1464:	3d 81       	ldd	r19, Y+5	; 0x05
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	2c f4       	brge	.+10     	; 0x1476 <DIO_VidGetPortValue+0x3c>
    146c:	8c 81       	ldd	r24, Y+4	; 0x04
    146e:	9d 81       	ldd	r25, Y+5	; 0x05
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	61 f0       	breq	.+24     	; 0x148c <DIO_VidGetPortValue+0x52>
    1474:	26 c0       	rjmp	.+76     	; 0x14c2 <DIO_VidGetPortValue+0x88>
    1476:	2c 81       	ldd	r18, Y+4	; 0x04
    1478:	3d 81       	ldd	r19, Y+5	; 0x05
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	a1 f0       	breq	.+40     	; 0x14a8 <DIO_VidGetPortValue+0x6e>
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	83 30       	cpi	r24, 0x03	; 3
    1486:	91 05       	cpc	r25, r1
    1488:	b1 f0       	breq	.+44     	; 0x14b6 <DIO_VidGetPortValue+0x7c>
    148a:	1b c0       	rjmp	.+54     	; 0x14c2 <DIO_VidGetPortValue+0x88>
		case Port_A  : *pu8Data= PORTA;break;
    148c:	eb e3       	ldi	r30, 0x3B	; 59
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	ea 81       	ldd	r30, Y+2	; 0x02
    1494:	fb 81       	ldd	r31, Y+3	; 0x03
    1496:	80 83       	st	Z, r24
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <DIO_VidGetPortValue+0x88>
		case Port_B  : *pu8Data= PORTB;break;
    149a:	e8 e3       	ldi	r30, 0x38	; 56
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	ea 81       	ldd	r30, Y+2	; 0x02
    14a2:	fb 81       	ldd	r31, Y+3	; 0x03
    14a4:	80 83       	st	Z, r24
    14a6:	0d c0       	rjmp	.+26     	; 0x14c2 <DIO_VidGetPortValue+0x88>
        case Port_C  : *pu8Data= PORTC;break;
    14a8:	e5 e3       	ldi	r30, 0x35	; 53
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	ea 81       	ldd	r30, Y+2	; 0x02
    14b0:	fb 81       	ldd	r31, Y+3	; 0x03
    14b2:	80 83       	st	Z, r24
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <DIO_VidGetPortValue+0x88>
        case Port_D  : *pu8Data= PORTD;break;
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	ea 81       	ldd	r30, Y+2	; 0x02
    14be:	fb 81       	ldd	r31, Y+3	; 0x03
    14c0:	80 83       	st	Z, r24

	}
}	
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <GIE_VidEnable>:
/************************************************************************/
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_Private.h"

void GIE_VidEnable(void){
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
	
	SET_BIT(SREG ,SREG_INT);
    14da:	af e5       	ldi	r26, 0x5F	; 95
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	ef e5       	ldi	r30, 0x5F	; 95
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	80 68       	ori	r24, 0x80	; 128
    14e6:	8c 93       	st	X, r24
	
}
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <GIE_VidDisable>:



void GIE_VidDisable(void){
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
	
	CLR_BIT(SREG,SREG_INT);
    14f6:	af e5       	ldi	r26, 0x5F	; 95
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ef e5       	ldi	r30, 0x5F	; 95
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8f 77       	andi	r24, 0x7F	; 127
    1502:	8c 93       	st	X, r24
	
}
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <Lifter_VidGoUp>:
#define LIFTER_PORT_LAT_EN        Pin5


/* Lifter Go Up The Specific Level */
void Lifter_VidGoUp( u16 Copy_u16NumOfSteps,u8 Copy_u8StepDelay, u8 Copy_u8Port, u8 Copy_u8DirePin,u8 Copy_u8Dire, u8 Copy_u8StepPin, u8 Copy_u8EnPin)
{
    150a:	cf 92       	push	r12
    150c:	ef 92       	push	r14
    150e:	0f 93       	push	r16
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	28 97       	sbiw	r28, 0x08	; 8
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	6b 83       	std	Y+3, r22	; 0x03
    152a:	4c 83       	std	Y+4, r20	; 0x04
    152c:	2d 83       	std	Y+5, r18	; 0x05
    152e:	0e 83       	std	Y+6, r16	; 0x06
    1530:	ef 82       	std	Y+7, r14	; 0x07
    1532:	c8 86       	std	Y+8, r12	; 0x08
	/* enable on the motor*/
		Stepper_Enable(En_On,Copy_u8Port,Copy_u8EnPin);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	6c 81       	ldd	r22, Y+4	; 0x04
    1538:	48 85       	ldd	r20, Y+8	; 0x08
    153a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>
		/*set the direction of the motor */
		Stepper_Direction(Copy_u8Dire,Copy_u8Port,Copy_u8DirePin);
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
    1540:	6c 81       	ldd	r22, Y+4	; 0x04
    1542:	4d 81       	ldd	r20, Y+5	; 0x05
    1544:	0e 94 76 10 	call	0x20ec	; 0x20ec <Stepper_Direction>
		/* Set the desired number of the steps */
		Stepper_SetNumberOfStep(Copy_u16NumOfSteps,Copy_u8StepDelay,Copy_u8Port,Copy_u8StepPin);
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	b9 01       	movw	r22, r18
    1554:	4c 81       	ldd	r20, Y+4	; 0x04
    1556:	2f 81       	ldd	r18, Y+7	; 0x07
    1558:	0e 94 31 12 	call	0x2462	; 0x2462 <Stepper_SetNumberOfStep>
		/* enable off the motor*/
		Stepper_Enable(En_Off,Copy_u8Port,Copy_u8EnPin);
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	6c 81       	ldd	r22, Y+4	; 0x04
    1560:	48 85       	ldd	r20, Y+8	; 0x08
    1562:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>

}
    1566:	28 96       	adiw	r28, 0x08	; 8
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	cf 91       	pop	r28
    1574:	df 91       	pop	r29
    1576:	0f 91       	pop	r16
    1578:	ef 90       	pop	r14
    157a:	cf 90       	pop	r12
    157c:	08 95       	ret

0000157e <Lifter_VidRotating>:


/*Lifter Rotation Function */
void Lifter_VidRotating(u16 Copy_u16NumOfSteps,u8 Copy_u8StepDelay, u8 Copy_u8Port, u8 Copy_u8DirePin, u8 Copy_u8Dire,u8 Copy_u8StepPin, u8 Copy_u8EnPin)
{
    157e:	cf 92       	push	r12
    1580:	ef 92       	push	r14
    1582:	0f 93       	push	r16
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	28 97       	sbiw	r28, 0x08	; 8
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	6b 83       	std	Y+3, r22	; 0x03
    159e:	4c 83       	std	Y+4, r20	; 0x04
    15a0:	2d 83       	std	Y+5, r18	; 0x05
    15a2:	0e 83       	std	Y+6, r16	; 0x06
    15a4:	ef 82       	std	Y+7, r14	; 0x07
    15a6:	c8 86       	std	Y+8, r12	; 0x08
    /* enable on the motor*/
	Stepper_Enable(En_On,Copy_u8Port,Copy_u8EnPin);
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	6c 81       	ldd	r22, Y+4	; 0x04
    15ac:	48 85       	ldd	r20, Y+8	; 0x08
    15ae:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>
	/*set the direction of the motor */
	Stepper_Direction(Copy_u8Dire,Copy_u8Port,Copy_u8DirePin);
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
    15b4:	6c 81       	ldd	r22, Y+4	; 0x04
    15b6:	4d 81       	ldd	r20, Y+5	; 0x05
    15b8:	0e 94 76 10 	call	0x20ec	; 0x20ec <Stepper_Direction>
	/* Set the desired number of the steps */
	Stepper_SetNumberOfStep(Copy_u16NumOfSteps,Copy_u8StepDelay,Copy_u8Port,Copy_u8StepPin);
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	9a 81       	ldd	r25, Y+2	; 0x02
    15c6:	b9 01       	movw	r22, r18
    15c8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ca:	2f 81       	ldd	r18, Y+7	; 0x07
    15cc:	0e 94 31 12 	call	0x2462	; 0x2462 <Stepper_SetNumberOfStep>
	/* enable off the motor*/
	Stepper_Enable(En_Off,Copy_u8Port,Copy_u8EnPin);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	6c 81       	ldd	r22, Y+4	; 0x04
    15d4:	48 85       	ldd	r20, Y+8	; 0x08
    15d6:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>

}
    15da:	28 96       	adiw	r28, 0x08	; 8
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	0f 91       	pop	r16
    15ec:	ef 90       	pop	r14
    15ee:	cf 90       	pop	r12
    15f0:	08 95       	ret

000015f2 <LifterLatch_VidGoPark>:

/* latch go through the cell to park the car */
void LifterLatch_VidGoPark(u16 Copy_u16NumOfSteps,u8 Copy_u8StepDelay, u8 Copy_u8Port, u8 Copy_u8DirePin,u8 Copy_u8Dire, u8 Copy_u8StepPin, u8 Copy_u8EnPin)
{
    15f2:	cf 92       	push	r12
    15f4:	ef 92       	push	r14
    15f6:	0f 93       	push	r16
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	28 97       	sbiw	r28, 0x08	; 8
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6b 83       	std	Y+3, r22	; 0x03
    1612:	4c 83       	std	Y+4, r20	; 0x04
    1614:	2d 83       	std	Y+5, r18	; 0x05
    1616:	0e 83       	std	Y+6, r16	; 0x06
    1618:	ef 82       	std	Y+7, r14	; 0x07
    161a:	c8 86       	std	Y+8, r12	; 0x08
	    /* enable on the motor*/
		Stepper_Enable(En_On,Copy_u8Port,Copy_u8EnPin);
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	6c 81       	ldd	r22, Y+4	; 0x04
    1620:	48 85       	ldd	r20, Y+8	; 0x08
    1622:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>
		/*set the direction of the motor */
		Stepper_Direction(Copy_u8Dire,Copy_u8Port,Copy_u8DirePin);
    1626:	8e 81       	ldd	r24, Y+6	; 0x06
    1628:	6c 81       	ldd	r22, Y+4	; 0x04
    162a:	4d 81       	ldd	r20, Y+5	; 0x05
    162c:	0e 94 76 10 	call	0x20ec	; 0x20ec <Stepper_Direction>
		/* Set the desired number of the steps */
		Stepper_SetNumberOfStep(Copy_u16NumOfSteps,Copy_u8StepDelay,Copy_u8Port,Copy_u8StepPin);
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	b9 01       	movw	r22, r18
    163c:	4c 81       	ldd	r20, Y+4	; 0x04
    163e:	2f 81       	ldd	r18, Y+7	; 0x07
    1640:	0e 94 31 12 	call	0x2462	; 0x2462 <Stepper_SetNumberOfStep>
		/* enable off the motor*/
		Stepper_Enable(En_Off,Copy_u8Port,Copy_u8EnPin);
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	6c 81       	ldd	r22, Y+4	; 0x04
    1648:	48 85       	ldd	r20, Y+8	; 0x08
    164a:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>

}
    164e:	28 96       	adiw	r28, 0x08	; 8
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	0f 91       	pop	r16
    1660:	ef 90       	pop	r14
    1662:	cf 90       	pop	r12
    1664:	08 95       	ret

00001666 <LifterLatch_VidStartPark>:

/* Start Parking function latch by pulling the car */
void LifterLatch_VidStartPark(u16 Copy_u16NumOfSteps,u8 Copy_u8StepDelay, u8 Copy_u8Port, u8 Copy_u8DirePin,u8 Copy_u8Dire, u8 Copy_u8StepPin, u8 Copy_u8EnPin)
{
    1666:	cf 92       	push	r12
    1668:	ef 92       	push	r14
    166a:	0f 93       	push	r16
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	28 97       	sbiw	r28, 0x08	; 8
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6b 83       	std	Y+3, r22	; 0x03
    1686:	4c 83       	std	Y+4, r20	; 0x04
    1688:	2d 83       	std	Y+5, r18	; 0x05
    168a:	0e 83       	std	Y+6, r16	; 0x06
    168c:	ef 82       	std	Y+7, r14	; 0x07
    168e:	c8 86       	std	Y+8, r12	; 0x08
	    /* enable on the motor*/
		Stepper_Enable(En_On,Copy_u8Port,Copy_u8EnPin);
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	6c 81       	ldd	r22, Y+4	; 0x04
    1694:	48 85       	ldd	r20, Y+8	; 0x08
    1696:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>
		/*set the direction of the motor */
		Stepper_Direction(Copy_u8Dire,Copy_u8Port,Copy_u8DirePin);
    169a:	8e 81       	ldd	r24, Y+6	; 0x06
    169c:	6c 81       	ldd	r22, Y+4	; 0x04
    169e:	4d 81       	ldd	r20, Y+5	; 0x05
    16a0:	0e 94 76 10 	call	0x20ec	; 0x20ec <Stepper_Direction>
		/* Set the desired number of the steps */
		Stepper_SetNumberOfStep(Copy_u16NumOfSteps,Copy_u8StepDelay,Copy_u8Port,Copy_u8StepPin);
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	9a 81       	ldd	r25, Y+2	; 0x02
    16ae:	b9 01       	movw	r22, r18
    16b0:	4c 81       	ldd	r20, Y+4	; 0x04
    16b2:	2f 81       	ldd	r18, Y+7	; 0x07
    16b4:	0e 94 31 12 	call	0x2462	; 0x2462 <Stepper_SetNumberOfStep>
		/* enable off the motor*/
		Stepper_Enable(En_Off,Copy_u8Port,Copy_u8EnPin);
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	6c 81       	ldd	r22, Y+4	; 0x04
    16bc:	48 85       	ldd	r20, Y+8	; 0x08
    16be:	0e 94 d7 12 	call	0x25ae	; 0x25ae <Stepper_Enable>
}
    16c2:	28 96       	adiw	r28, 0x08	; 8
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	0f 91       	pop	r16
    16d4:	ef 90       	pop	r14
    16d6:	cf 90       	pop	r12
    16d8:	08 95       	ret

000016da <Lifter_VidReturnHome>:

/* Return home */
void Lifter_VidReturnHome(u16 Copy_u16NumOfSteps,u8 Copy_u8StepDelay, u8 Copy_u8Port, u8 Copy_u8DirePin,u8 Copy_u8Dire, u8 Copy_u8StepPin, u8 Copy_u8EnPin)
{
    16da:	cf 92       	push	r12
    16dc:	ef 92       	push	r14
    16de:	0f 93       	push	r16
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	c0 54       	subi	r28, 0x40	; 64
    16ea:	d0 40       	sbci	r29, 0x00	; 0
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
    16f6:	9a af       	std	Y+58, r25	; 0x3a
    16f8:	89 af       	std	Y+57, r24	; 0x39
    16fa:	6b af       	std	Y+59, r22	; 0x3b
    16fc:	4c af       	std	Y+60, r20	; 0x3c
    16fe:	2d af       	std	Y+61, r18	; 0x3d
    1700:	0e af       	std	Y+62, r16	; 0x3e
    1702:	ef ae       	std	Y+63, r14	; 0x3f
    1704:	fe 01       	movw	r30, r28
    1706:	e0 5c       	subi	r30, 0xC0	; 192
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	c0 82       	st	Z, r12
	LifterLatch_VidStartPark( Copy_u16NumOfSteps,Copy_u8StepDelay, Copy_u8Port, Copy_u8DirePin, Copy_u8Dire,  Copy_u8StepPin,  Copy_u8EnPin);
    170c:	89 ad       	ldd	r24, Y+57	; 0x39
    170e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1710:	6b ad       	ldd	r22, Y+59	; 0x3b
    1712:	4c ad       	ldd	r20, Y+60	; 0x3c
    1714:	2d ad       	ldd	r18, Y+61	; 0x3d
    1716:	0e ad       	ldd	r16, Y+62	; 0x3e
    1718:	ef ac       	ldd	r14, Y+63	; 0x3f
    171a:	fe 01       	movw	r30, r28
    171c:	e0 5c       	subi	r30, 0xC0	; 192
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	c0 80       	ld	r12, Z
    1722:	0e 94 33 0b 	call	0x1666	; 0x1666 <LifterLatch_VidStartPark>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a8 ec       	ldi	r26, 0xC8	; 200
    172c:	b2 e4       	ldi	r27, 0x42	; 66
    172e:	8d ab       	std	Y+53, r24	; 0x35
    1730:	9e ab       	std	Y+54, r25	; 0x36
    1732:	af ab       	std	Y+55, r26	; 0x37
    1734:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1736:	6d a9       	ldd	r22, Y+53	; 0x35
    1738:	7e a9       	ldd	r23, Y+54	; 0x36
    173a:	8f a9       	ldd	r24, Y+55	; 0x37
    173c:	98 ad       	ldd	r25, Y+56	; 0x38
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a ef       	ldi	r20, 0xFA	; 250
    1744:	54 e4       	ldi	r21, 0x44	; 68
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	89 ab       	std	Y+49, r24	; 0x31
    1750:	9a ab       	std	Y+50, r25	; 0x32
    1752:	ab ab       	std	Y+51, r26	; 0x33
    1754:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1756:	69 a9       	ldd	r22, Y+49	; 0x31
    1758:	7a a9       	ldd	r23, Y+50	; 0x32
    175a:	8b a9       	ldd	r24, Y+51	; 0x33
    175c:	9c a9       	ldd	r25, Y+52	; 0x34
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e8       	ldi	r20, 0x80	; 128
    1764:	5f e3       	ldi	r21, 0x3F	; 63
    1766:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    176a:	88 23       	and	r24, r24
    176c:	2c f4       	brge	.+10     	; 0x1778 <Lifter_VidReturnHome+0x9e>
		__ticks = 1;
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	98 ab       	std	Y+48, r25	; 0x30
    1774:	8f a7       	std	Y+47, r24	; 0x2f
    1776:	3f c0       	rjmp	.+126    	; 0x17f6 <Lifter_VidReturnHome+0x11c>
	else if (__tmp > 65535)
    1778:	69 a9       	ldd	r22, Y+49	; 0x31
    177a:	7a a9       	ldd	r23, Y+50	; 0x32
    177c:	8b a9       	ldd	r24, Y+51	; 0x33
    177e:	9c a9       	ldd	r25, Y+52	; 0x34
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	3f ef       	ldi	r19, 0xFF	; 255
    1784:	4f e7       	ldi	r20, 0x7F	; 127
    1786:	57 e4       	ldi	r21, 0x47	; 71
    1788:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178c:	18 16       	cp	r1, r24
    178e:	4c f5       	brge	.+82     	; 0x17e2 <Lifter_VidReturnHome+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1790:	6d a9       	ldd	r22, Y+53	; 0x35
    1792:	7e a9       	ldd	r23, Y+54	; 0x36
    1794:	8f a9       	ldd	r24, Y+55	; 0x37
    1796:	98 ad       	ldd	r25, Y+56	; 0x38
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e2       	ldi	r20, 0x20	; 32
    179e:	51 e4       	ldi	r21, 0x41	; 65
    17a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	98 ab       	std	Y+48, r25	; 0x30
    17b6:	8f a7       	std	Y+47, r24	; 0x2f
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <Lifter_VidReturnHome+0xfe>
    17ba:	88 ec       	ldi	r24, 0xC8	; 200
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9e a7       	std	Y+46, r25	; 0x2e
    17c0:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    17c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <Lifter_VidReturnHome+0xec>
    17ca:	9e a7       	std	Y+46, r25	; 0x2e
    17cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    17d0:	98 a9       	ldd	r25, Y+48	; 0x30
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	98 ab       	std	Y+48, r25	; 0x30
    17d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17da:	98 a9       	ldd	r25, Y+48	; 0x30
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	69 f7       	brne	.-38     	; 0x17ba <Lifter_VidReturnHome+0xe0>
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <Lifter_VidReturnHome+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e2:	69 a9       	ldd	r22, Y+49	; 0x31
    17e4:	7a a9       	ldd	r23, Y+50	; 0x32
    17e6:	8b a9       	ldd	r24, Y+51	; 0x33
    17e8:	9c a9       	ldd	r25, Y+52	; 0x34
    17ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	98 ab       	std	Y+48, r25	; 0x30
    17f4:	8f a7       	std	Y+47, r24	; 0x2f
    17f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f8:	98 a9       	ldd	r25, Y+48	; 0x30
    17fa:	9c a7       	std	Y+44, r25	; 0x2c
    17fc:	8b a7       	std	Y+43, r24	; 0x2b
    17fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1800:	9c a5       	ldd	r25, Y+44	; 0x2c
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <Lifter_VidReturnHome+0x128>
    1806:	9c a7       	std	Y+44, r25	; 0x2c
    1808:	8b a7       	std	Y+43, r24	; 0x2b
	  _delay_ms(100);
    Lifter_VidRotating(Copy_u16NumOfSteps,Copy_u8StepDelay, Copy_u8Port, Copy_u8DirePin, Copy_u8Dire,  Copy_u8StepPin,  Copy_u8EnPin);
    180a:	89 ad       	ldd	r24, Y+57	; 0x39
    180c:	9a ad       	ldd	r25, Y+58	; 0x3a
    180e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1810:	4c ad       	ldd	r20, Y+60	; 0x3c
    1812:	2d ad       	ldd	r18, Y+61	; 0x3d
    1814:	0e ad       	ldd	r16, Y+62	; 0x3e
    1816:	ef ac       	ldd	r14, Y+63	; 0x3f
    1818:	fe 01       	movw	r30, r28
    181a:	e0 5c       	subi	r30, 0xC0	; 192
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	c0 80       	ld	r12, Z
    1820:	0e 94 bf 0a 	call	0x157e	; 0x157e <Lifter_VidRotating>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a8 ec       	ldi	r26, 0xC8	; 200
    182a:	b2 e4       	ldi	r27, 0x42	; 66
    182c:	8f a3       	std	Y+39, r24	; 0x27
    182e:	98 a7       	std	Y+40, r25	; 0x28
    1830:	a9 a7       	std	Y+41, r26	; 0x29
    1832:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1834:	6f a1       	ldd	r22, Y+39	; 0x27
    1836:	78 a5       	ldd	r23, Y+40	; 0x28
    1838:	89 a5       	ldd	r24, Y+41	; 0x29
    183a:	9a a5       	ldd	r25, Y+42	; 0x2a
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	4a ef       	ldi	r20, 0xFA	; 250
    1842:	54 e4       	ldi	r21, 0x44	; 68
    1844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	8b a3       	std	Y+35, r24	; 0x23
    184e:	9c a3       	std	Y+36, r25	; 0x24
    1850:	ad a3       	std	Y+37, r26	; 0x25
    1852:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1854:	6b a1       	ldd	r22, Y+35	; 0x23
    1856:	7c a1       	ldd	r23, Y+36	; 0x24
    1858:	8d a1       	ldd	r24, Y+37	; 0x25
    185a:	9e a1       	ldd	r25, Y+38	; 0x26
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e8       	ldi	r20, 0x80	; 128
    1862:	5f e3       	ldi	r21, 0x3F	; 63
    1864:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1868:	88 23       	and	r24, r24
    186a:	2c f4       	brge	.+10     	; 0x1876 <Lifter_VidReturnHome+0x19c>
		__ticks = 1;
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9a a3       	std	Y+34, r25	; 0x22
    1872:	89 a3       	std	Y+33, r24	; 0x21
    1874:	3f c0       	rjmp	.+126    	; 0x18f4 <Lifter_VidReturnHome+0x21a>
	else if (__tmp > 65535)
    1876:	6b a1       	ldd	r22, Y+35	; 0x23
    1878:	7c a1       	ldd	r23, Y+36	; 0x24
    187a:	8d a1       	ldd	r24, Y+37	; 0x25
    187c:	9e a1       	ldd	r25, Y+38	; 0x26
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	3f ef       	ldi	r19, 0xFF	; 255
    1882:	4f e7       	ldi	r20, 0x7F	; 127
    1884:	57 e4       	ldi	r21, 0x47	; 71
    1886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    188a:	18 16       	cp	r1, r24
    188c:	4c f5       	brge	.+82     	; 0x18e0 <Lifter_VidReturnHome+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188e:	6f a1       	ldd	r22, Y+39	; 0x27
    1890:	78 a5       	ldd	r23, Y+40	; 0x28
    1892:	89 a5       	ldd	r24, Y+41	; 0x29
    1894:	9a a5       	ldd	r25, Y+42	; 0x2a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	40 e2       	ldi	r20, 0x20	; 32
    189c:	51 e4       	ldi	r21, 0x41	; 65
    189e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	9a a3       	std	Y+34, r25	; 0x22
    18b4:	89 a3       	std	Y+33, r24	; 0x21
    18b6:	0f c0       	rjmp	.+30     	; 0x18d6 <Lifter_VidReturnHome+0x1fc>
    18b8:	88 ec       	ldi	r24, 0xC8	; 200
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	98 a3       	std	Y+32, r25	; 0x20
    18be:	8f 8f       	std	Y+31, r24	; 0x1f
    18c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c2:	98 a1       	ldd	r25, Y+32	; 0x20
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <Lifter_VidReturnHome+0x1ea>
    18c8:	98 a3       	std	Y+32, r25	; 0x20
    18ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18cc:	89 a1       	ldd	r24, Y+33	; 0x21
    18ce:	9a a1       	ldd	r25, Y+34	; 0x22
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	9a a3       	std	Y+34, r25	; 0x22
    18d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d6:	89 a1       	ldd	r24, Y+33	; 0x21
    18d8:	9a a1       	ldd	r25, Y+34	; 0x22
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	69 f7       	brne	.-38     	; 0x18b8 <Lifter_VidReturnHome+0x1de>
    18de:	14 c0       	rjmp	.+40     	; 0x1908 <Lifter_VidReturnHome+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e0:	6b a1       	ldd	r22, Y+35	; 0x23
    18e2:	7c a1       	ldd	r23, Y+36	; 0x24
    18e4:	8d a1       	ldd	r24, Y+37	; 0x25
    18e6:	9e a1       	ldd	r25, Y+38	; 0x26
    18e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	9a a3       	std	Y+34, r25	; 0x22
    18f2:	89 a3       	std	Y+33, r24	; 0x21
    18f4:	89 a1       	ldd	r24, Y+33	; 0x21
    18f6:	9a a1       	ldd	r25, Y+34	; 0x22
    18f8:	9e 8f       	std	Y+30, r25	; 0x1e
    18fa:	8d 8f       	std	Y+29, r24	; 0x1d
    18fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <Lifter_VidReturnHome+0x226>
    1904:	9e 8f       	std	Y+30, r25	; 0x1e
    1906:	8d 8f       	std	Y+29, r24	; 0x1d
	  _delay_ms(100);
	Lifter_VidGoUp(Copy_u16NumOfSteps,Copy_u8StepDelay, Copy_u8Port, Copy_u8DirePin, Copy_u8Dire,  Copy_u8StepPin,  Copy_u8EnPin);
    1908:	89 ad       	ldd	r24, Y+57	; 0x39
    190a:	9a ad       	ldd	r25, Y+58	; 0x3a
    190c:	6b ad       	ldd	r22, Y+59	; 0x3b
    190e:	4c ad       	ldd	r20, Y+60	; 0x3c
    1910:	2d ad       	ldd	r18, Y+61	; 0x3d
    1912:	0e ad       	ldd	r16, Y+62	; 0x3e
    1914:	ef ac       	ldd	r14, Y+63	; 0x3f
    1916:	fe 01       	movw	r30, r28
    1918:	e0 5c       	subi	r30, 0xC0	; 192
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	c0 80       	ld	r12, Z
    191e:	0e 94 85 0a 	call	0x150a	; 0x150a <Lifter_VidGoUp>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a8 ec       	ldi	r26, 0xC8	; 200
    1928:	b2 e4       	ldi	r27, 0x42	; 66
    192a:	89 8f       	std	Y+25, r24	; 0x19
    192c:	9a 8f       	std	Y+26, r25	; 0x1a
    192e:	ab 8f       	std	Y+27, r26	; 0x1b
    1930:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1932:	69 8d       	ldd	r22, Y+25	; 0x19
    1934:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1936:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1938:	9c 8d       	ldd	r25, Y+28	; 0x1c
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4a ef       	ldi	r20, 0xFA	; 250
    1940:	54 e4       	ldi	r21, 0x44	; 68
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	8d 8b       	std	Y+21, r24	; 0x15
    194c:	9e 8b       	std	Y+22, r25	; 0x16
    194e:	af 8b       	std	Y+23, r26	; 0x17
    1950:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1952:	6d 89       	ldd	r22, Y+21	; 0x15
    1954:	7e 89       	ldd	r23, Y+22	; 0x16
    1956:	8f 89       	ldd	r24, Y+23	; 0x17
    1958:	98 8d       	ldd	r25, Y+24	; 0x18
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	40 e8       	ldi	r20, 0x80	; 128
    1960:	5f e3       	ldi	r21, 0x3F	; 63
    1962:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1966:	88 23       	and	r24, r24
    1968:	2c f4       	brge	.+10     	; 0x1974 <Lifter_VidReturnHome+0x29a>
		__ticks = 1;
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
    1972:	3f c0       	rjmp	.+126    	; 0x19f2 <Lifter_VidReturnHome+0x318>
	else if (__tmp > 65535)
    1974:	6d 89       	ldd	r22, Y+21	; 0x15
    1976:	7e 89       	ldd	r23, Y+22	; 0x16
    1978:	8f 89       	ldd	r24, Y+23	; 0x17
    197a:	98 8d       	ldd	r25, Y+24	; 0x18
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	3f ef       	ldi	r19, 0xFF	; 255
    1980:	4f e7       	ldi	r20, 0x7F	; 127
    1982:	57 e4       	ldi	r21, 0x47	; 71
    1984:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1988:	18 16       	cp	r1, r24
    198a:	4c f5       	brge	.+82     	; 0x19de <Lifter_VidReturnHome+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    198c:	69 8d       	ldd	r22, Y+25	; 0x19
    198e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1990:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1992:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e2       	ldi	r20, 0x20	; 32
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	9c 8b       	std	Y+20, r25	; 0x14
    19b2:	8b 8b       	std	Y+19, r24	; 0x13
    19b4:	0f c0       	rjmp	.+30     	; 0x19d4 <Lifter_VidReturnHome+0x2fa>
    19b6:	88 ec       	ldi	r24, 0xC8	; 200
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9a 8b       	std	Y+18, r25	; 0x12
    19bc:	89 8b       	std	Y+17, r24	; 0x11
    19be:	89 89       	ldd	r24, Y+17	; 0x11
    19c0:	9a 89       	ldd	r25, Y+18	; 0x12
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <Lifter_VidReturnHome+0x2e8>
    19c6:	9a 8b       	std	Y+18, r25	; 0x12
    19c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	8b 89       	ldd	r24, Y+19	; 0x13
    19cc:	9c 89       	ldd	r25, Y+20	; 0x14
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	9c 8b       	std	Y+20, r25	; 0x14
    19d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d4:	8b 89       	ldd	r24, Y+19	; 0x13
    19d6:	9c 89       	ldd	r25, Y+20	; 0x14
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	69 f7       	brne	.-38     	; 0x19b6 <Lifter_VidReturnHome+0x2dc>
    19dc:	14 c0       	rjmp	.+40     	; 0x1a06 <Lifter_VidReturnHome+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	6d 89       	ldd	r22, Y+21	; 0x15
    19e0:	7e 89       	ldd	r23, Y+22	; 0x16
    19e2:	8f 89       	ldd	r24, Y+23	; 0x17
    19e4:	98 8d       	ldd	r25, Y+24	; 0x18
    19e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	98 8b       	std	Y+16, r25	; 0x10
    19f8:	8f 87       	std	Y+15, r24	; 0x0f
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	98 89       	ldd	r25, Y+16	; 0x10
    19fe:	01 97       	sbiw	r24, 0x01	; 1
    1a00:	f1 f7       	brne	.-4      	; 0x19fe <Lifter_VidReturnHome+0x324>
    1a02:	98 8b       	std	Y+16, r25	; 0x10
    1a04:	8f 87       	std	Y+15, r24	; 0x0f
     _delay_ms(100);
    LifterLatch_VidGoPark(Copy_u16NumOfSteps,Copy_u8StepDelay, Copy_u8Port, Copy_u8DirePin, Copy_u8Dire,  Copy_u8StepPin,  Copy_u8EnPin);
    1a06:	89 ad       	ldd	r24, Y+57	; 0x39
    1a08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a0a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a0c:	4c ad       	ldd	r20, Y+60	; 0x3c
    1a0e:	2d ad       	ldd	r18, Y+61	; 0x3d
    1a10:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a12:	ef ac       	ldd	r14, Y+63	; 0x3f
    1a14:	fe 01       	movw	r30, r28
    1a16:	e0 5c       	subi	r30, 0xC0	; 192
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	c0 80       	ld	r12, Z
    1a1c:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LifterLatch_VidGoPark>
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a8 e4       	ldi	r26, 0x48	; 72
    1a26:	b2 e4       	ldi	r27, 0x42	; 66
    1a28:	8b 87       	std	Y+11, r24	; 0x0b
    1a2a:	9c 87       	std	Y+12, r25	; 0x0c
    1a2c:	ad 87       	std	Y+13, r26	; 0x0d
    1a2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	4a ef       	ldi	r20, 0xFA	; 250
    1a3e:	54 e4       	ldi	r21, 0x44	; 68
    1a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	8f 83       	std	Y+7, r24	; 0x07
    1a4a:	98 87       	std	Y+8, r25	; 0x08
    1a4c:	a9 87       	std	Y+9, r26	; 0x09
    1a4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a50:	6f 81       	ldd	r22, Y+7	; 0x07
    1a52:	78 85       	ldd	r23, Y+8	; 0x08
    1a54:	89 85       	ldd	r24, Y+9	; 0x09
    1a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <Lifter_VidReturnHome+0x398>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9e 83       	std	Y+6, r25	; 0x06
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
    1a70:	3f c0       	rjmp	.+126    	; 0x1af0 <Lifter_VidReturnHome+0x416>
	else if (__tmp > 65535)
    1a72:	6f 81       	ldd	r22, Y+7	; 0x07
    1a74:	78 85       	ldd	r23, Y+8	; 0x08
    1a76:	89 85       	ldd	r24, Y+9	; 0x09
    1a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	3f ef       	ldi	r19, 0xFF	; 255
    1a7e:	4f e7       	ldi	r20, 0x7F	; 127
    1a80:	57 e4       	ldi	r21, 0x47	; 71
    1a82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a86:	18 16       	cp	r1, r24
    1a88:	4c f5       	brge	.+82     	; 0x1adc <Lifter_VidReturnHome+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e2       	ldi	r20, 0x20	; 32
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	8d 83       	std	Y+5, r24	; 0x05
    1ab2:	0f c0       	rjmp	.+30     	; 0x1ad2 <Lifter_VidReturnHome+0x3f8>
    1ab4:	88 ec       	ldi	r24, 0xC8	; 200
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	8b 83       	std	Y+3, r24	; 0x03
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	01 97       	sbiw	r24, 0x01	; 1
    1ac2:	f1 f7       	brne	.-4      	; 0x1ac0 <Lifter_VidReturnHome+0x3e6>
    1ac4:	9c 83       	std	Y+4, r25	; 0x04
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	69 f7       	brne	.-38     	; 0x1ab4 <Lifter_VidReturnHome+0x3da>
    1ada:	14 c0       	rjmp	.+40     	; 0x1b04 <Lifter_VidReturnHome+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1adc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ade:	78 85       	ldd	r23, Y+8	; 0x08
    1ae0:	89 85       	ldd	r24, Y+9	; 0x09
    1ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
    1af2:	9e 81       	ldd	r25, Y+6	; 0x06
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	9a 81       	ldd	r25, Y+2	; 0x02
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <Lifter_VidReturnHome+0x422>
    1b00:	9a 83       	std	Y+2, r25	; 0x02
    1b02:	89 83       	std	Y+1, r24	; 0x01
     _delay_ms(50);

}
    1b04:	c0 5c       	subi	r28, 0xC0	; 192
    1b06:	df 4f       	sbci	r29, 0xFF	; 255
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	0f 91       	pop	r16
    1b18:	ef 90       	pop	r14
    1b1a:	cf 90       	pop	r12
    1b1c:	08 95       	ret

00001b1e <Cell_VidParking>:


/* Park in the selected section */

void Cell_VidParking(u8 Copy_u8NumCell)
{
    1b1e:	cf 92       	push	r12
    1b20:	ef 92       	push	r14
    1b22:	0f 93       	push	r16
    1b24:	1f 93       	push	r17
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	c7 54       	subi	r28, 0x47	; 71
    1b30:	d0 40       	sbci	r29, 0x00	; 0
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	e9 5b       	subi	r30, 0xB9	; 185
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 83       	st	Z, r24
switch(Copy_u8NumCell)
    1b44:	fe 01       	movw	r30, r28
    1b46:	e9 5b       	subi	r30, 0xB9	; 185
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	80 81       	ld	r24, Z
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	81 33       	cpi	r24, 0x31	; 49
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <Cell_VidParking+0x3a>
    1b56:	9c c2       	rjmp	.+1336   	; 0x2090 <Cell_VidParking+0x572>
{
     case '1': LifterLatch_VidStartPark(25,100,Port_A,Pin7,Clockwise,Pin6,Pin5);
    1b58:	89 e1       	ldi	r24, 0x19	; 25
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	64 e6       	ldi	r22, 0x64	; 100
    1b5e:	40 e0       	ldi	r20, 0x00	; 0
    1b60:	27 e0       	ldi	r18, 0x07	; 7
    1b62:	00 e0       	ldi	r16, 0x00	; 0
    1b64:	0f 2e       	mov	r0, r31
    1b66:	f6 e0       	ldi	r31, 0x06	; 6
    1b68:	ef 2e       	mov	r14, r31
    1b6a:	f0 2d       	mov	r31, r0
    1b6c:	0f 2e       	mov	r0, r31
    1b6e:	f5 e0       	ldi	r31, 0x05	; 5
    1b70:	cf 2e       	mov	r12, r31
    1b72:	f0 2d       	mov	r31, r0
    1b74:	0e 94 33 0b 	call	0x1666	; 0x1666 <LifterLatch_VidStartPark>
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ed 5b       	subi	r30, 0xBD	; 189
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	80 e0       	ldi	r24, 0x00	; 0
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	a8 ec       	ldi	r26, 0xC8	; 200
    1b84:	b2 e4       	ldi	r27, 0x42	; 66
    1b86:	80 83       	st	Z, r24
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	a2 83       	std	Z+2, r26	; 0x02
    1b8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8e:	8e 01       	movw	r16, r28
    1b90:	01 5c       	subi	r16, 0xC1	; 193
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
    1b94:	fe 01       	movw	r30, r28
    1b96:	ed 5b       	subi	r30, 0xBD	; 189
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	60 81       	ld	r22, Z
    1b9c:	71 81       	ldd	r23, Z+1	; 0x01
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	93 81       	ldd	r25, Z+3	; 0x03
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a ef       	ldi	r20, 0xFA	; 250
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	80 83       	st	Z, r24
    1bb6:	91 83       	std	Z+1, r25	; 0x01
    1bb8:	a2 83       	std	Z+2, r26	; 0x02
    1bba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ff 96       	adiw	r30, 0x3f	; 63
    1bc0:	60 81       	ld	r22, Z
    1bc2:	71 81       	ldd	r23, Z+1	; 0x01
    1bc4:	82 81       	ldd	r24, Z+2	; 0x02
    1bc6:	93 81       	ldd	r25, Z+3	; 0x03
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <Cell_VidParking+0xc4>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9e af       	std	Y+62, r25	; 0x3e
    1bde:	8d af       	std	Y+61, r24	; 0x3d
    1be0:	46 c0       	rjmp	.+140    	; 0x1c6e <Cell_VidParking+0x150>
	else if (__tmp > 65535)
    1be2:	fe 01       	movw	r30, r28
    1be4:	ff 96       	adiw	r30, 0x3f	; 63
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	64 f5       	brge	.+88     	; 0x1c56 <Cell_VidParking+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ed 5b       	subi	r30, 0xBD	; 189
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e2       	ldi	r20, 0x20	; 32
    1c12:	51 e4       	ldi	r21, 0x41	; 65
    1c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9e af       	std	Y+62, r25	; 0x3e
    1c2a:	8d af       	std	Y+61, r24	; 0x3d
    1c2c:	0f c0       	rjmp	.+30     	; 0x1c4c <Cell_VidParking+0x12e>
    1c2e:	88 ec       	ldi	r24, 0xC8	; 200
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	9c af       	std	Y+60, r25	; 0x3c
    1c34:	8b af       	std	Y+59, r24	; 0x3b
    1c36:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c38:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c3a:	01 97       	sbiw	r24, 0x01	; 1
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <Cell_VidParking+0x11c>
    1c3e:	9c af       	std	Y+60, r25	; 0x3c
    1c40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	9e af       	std	Y+62, r25	; 0x3e
    1c4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	69 f7       	brne	.-38     	; 0x1c2e <Cell_VidParking+0x110>
    1c54:	16 c0       	rjmp	.+44     	; 0x1c82 <Cell_VidParking+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c56:	fe 01       	movw	r30, r28
    1c58:	ff 96       	adiw	r30, 0x3f	; 63
    1c5a:	60 81       	ld	r22, Z
    1c5c:	71 81       	ldd	r23, Z+1	; 0x01
    1c5e:	82 81       	ldd	r24, Z+2	; 0x02
    1c60:	93 81       	ldd	r25, Z+3	; 0x03
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e af       	std	Y+62, r25	; 0x3e
    1c6c:	8d af       	std	Y+61, r24	; 0x3d
    1c6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c72:	9a af       	std	Y+58, r25	; 0x3a
    1c74:	89 af       	std	Y+57, r24	; 0x39
    1c76:	89 ad       	ldd	r24, Y+57	; 0x39
    1c78:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <Cell_VidParking+0x15c>
    1c7e:	9a af       	std	Y+58, r25	; 0x3a
    1c80:	89 af       	std	Y+57, r24	; 0x39
               _delay_ms(100);
               Lifter_VidGoUp(4000,10,Port_D,Pin5,AntiClockwise,Pin6,Pin7);
    1c82:	80 ea       	ldi	r24, 0xA0	; 160
    1c84:	9f e0       	ldi	r25, 0x0F	; 15
    1c86:	6a e0       	ldi	r22, 0x0A	; 10
    1c88:	43 e0       	ldi	r20, 0x03	; 3
    1c8a:	25 e0       	ldi	r18, 0x05	; 5
    1c8c:	01 e0       	ldi	r16, 0x01	; 1
    1c8e:	0f 2e       	mov	r0, r31
    1c90:	f6 e0       	ldi	r31, 0x06	; 6
    1c92:	ef 2e       	mov	r14, r31
    1c94:	f0 2d       	mov	r31, r0
    1c96:	0f 2e       	mov	r0, r31
    1c98:	f7 e0       	ldi	r31, 0x07	; 7
    1c9a:	cf 2e       	mov	r12, r31
    1c9c:	f0 2d       	mov	r31, r0
    1c9e:	0e 94 85 0a 	call	0x150a	; 0x150a <Lifter_VidGoUp>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	a8 ec       	ldi	r26, 0xC8	; 200
    1ca8:	b2 e4       	ldi	r27, 0x42	; 66
    1caa:	8d ab       	std	Y+53, r24	; 0x35
    1cac:	9e ab       	std	Y+54, r25	; 0x36
    1cae:	af ab       	std	Y+55, r26	; 0x37
    1cb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	4a ef       	ldi	r20, 0xFA	; 250
    1cc0:	54 e4       	ldi	r21, 0x44	; 68
    1cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	89 ab       	std	Y+49, r24	; 0x31
    1ccc:	9a ab       	std	Y+50, r25	; 0x32
    1cce:	ab ab       	std	Y+51, r26	; 0x33
    1cd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1cd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1cd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	40 e8       	ldi	r20, 0x80	; 128
    1ce0:	5f e3       	ldi	r21, 0x3F	; 63
    1ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce6:	88 23       	and	r24, r24
    1ce8:	2c f4       	brge	.+10     	; 0x1cf4 <Cell_VidParking+0x1d6>
		__ticks = 1;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	98 ab       	std	Y+48, r25	; 0x30
    1cf0:	8f a7       	std	Y+47, r24	; 0x2f
    1cf2:	3f c0       	rjmp	.+126    	; 0x1d72 <Cell_VidParking+0x254>
	else if (__tmp > 65535)
    1cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	3f ef       	ldi	r19, 0xFF	; 255
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	57 e4       	ldi	r21, 0x47	; 71
    1d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	4c f5       	brge	.+82     	; 0x1d5e <Cell_VidParking+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1d0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1d10:	8f a9       	ldd	r24, Y+55	; 0x37
    1d12:	98 ad       	ldd	r25, Y+56	; 0x38
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	40 e2       	ldi	r20, 0x20	; 32
    1d1a:	51 e4       	ldi	r21, 0x41	; 65
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	bc 01       	movw	r22, r24
    1d26:	cd 01       	movw	r24, r26
    1d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	98 ab       	std	Y+48, r25	; 0x30
    1d32:	8f a7       	std	Y+47, r24	; 0x2f
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <Cell_VidParking+0x236>
    1d36:	88 ec       	ldi	r24, 0xC8	; 200
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9e a7       	std	Y+46, r25	; 0x2e
    1d3c:	8d a7       	std	Y+45, r24	; 0x2d
    1d3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <Cell_VidParking+0x224>
    1d46:	9e a7       	std	Y+46, r25	; 0x2e
    1d48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4e:	01 97       	sbiw	r24, 0x01	; 1
    1d50:	98 ab       	std	Y+48, r25	; 0x30
    1d52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d56:	98 a9       	ldd	r25, Y+48	; 0x30
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	69 f7       	brne	.-38     	; 0x1d36 <Cell_VidParking+0x218>
    1d5c:	14 c0       	rjmp	.+40     	; 0x1d86 <Cell_VidParking+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1d60:	7a a9       	ldd	r23, Y+50	; 0x32
    1d62:	8b a9       	ldd	r24, Y+51	; 0x33
    1d64:	9c a9       	ldd	r25, Y+52	; 0x34
    1d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	98 ab       	std	Y+48, r25	; 0x30
    1d70:	8f a7       	std	Y+47, r24	; 0x2f
    1d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d74:	98 a9       	ldd	r25, Y+48	; 0x30
    1d76:	9c a7       	std	Y+44, r25	; 0x2c
    1d78:	8b a7       	std	Y+43, r24	; 0x2b
    1d7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <Cell_VidParking+0x260>
    1d82:	9c a7       	std	Y+44, r25	; 0x2c
    1d84:	8b a7       	std	Y+43, r24	; 0x2b
               _delay_ms(100);
               Lifter_VidRotating(50,100,Port_D,Pin2,Clockwise,Pin3,Pin4);
    1d86:	82 e3       	ldi	r24, 0x32	; 50
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	64 e6       	ldi	r22, 0x64	; 100
    1d8c:	43 e0       	ldi	r20, 0x03	; 3
    1d8e:	22 e0       	ldi	r18, 0x02	; 2
    1d90:	00 e0       	ldi	r16, 0x00	; 0
    1d92:	0f 2e       	mov	r0, r31
    1d94:	f3 e0       	ldi	r31, 0x03	; 3
    1d96:	ef 2e       	mov	r14, r31
    1d98:	f0 2d       	mov	r31, r0
    1d9a:	cc 24       	eor	r12, r12
    1d9c:	68 94       	set
    1d9e:	c2 f8       	bld	r12, 2
    1da0:	0e 94 bf 0a 	call	0x157e	; 0x157e <Lifter_VidRotating>
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	a8 ec       	ldi	r26, 0xC8	; 200
    1daa:	b2 e4       	ldi	r27, 0x42	; 66
    1dac:	8f a3       	std	Y+39, r24	; 0x27
    1dae:	98 a7       	std	Y+40, r25	; 0x28
    1db0:	a9 a7       	std	Y+41, r26	; 0x29
    1db2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db4:	6f a1       	ldd	r22, Y+39	; 0x27
    1db6:	78 a5       	ldd	r23, Y+40	; 0x28
    1db8:	89 a5       	ldd	r24, Y+41	; 0x29
    1dba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	4a ef       	ldi	r20, 0xFA	; 250
    1dc2:	54 e4       	ldi	r21, 0x44	; 68
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	8b a3       	std	Y+35, r24	; 0x23
    1dce:	9c a3       	std	Y+36, r25	; 0x24
    1dd0:	ad a3       	std	Y+37, r26	; 0x25
    1dd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1dd4:	6b a1       	ldd	r22, Y+35	; 0x23
    1dd6:	7c a1       	ldd	r23, Y+36	; 0x24
    1dd8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dda:	9e a1       	ldd	r25, Y+38	; 0x26
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e8       	ldi	r20, 0x80	; 128
    1de2:	5f e3       	ldi	r21, 0x3F	; 63
    1de4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de8:	88 23       	and	r24, r24
    1dea:	2c f4       	brge	.+10     	; 0x1df6 <Cell_VidParking+0x2d8>
		__ticks = 1;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9a a3       	std	Y+34, r25	; 0x22
    1df2:	89 a3       	std	Y+33, r24	; 0x21
    1df4:	3f c0       	rjmp	.+126    	; 0x1e74 <Cell_VidParking+0x356>
	else if (__tmp > 65535)
    1df6:	6b a1       	ldd	r22, Y+35	; 0x23
    1df8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfe:	20 e0       	ldi	r18, 0x00	; 0
    1e00:	3f ef       	ldi	r19, 0xFF	; 255
    1e02:	4f e7       	ldi	r20, 0x7F	; 127
    1e04:	57 e4       	ldi	r21, 0x47	; 71
    1e06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0a:	18 16       	cp	r1, r24
    1e0c:	4c f5       	brge	.+82     	; 0x1e60 <Cell_VidParking+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1e10:	78 a5       	ldd	r23, Y+40	; 0x28
    1e12:	89 a5       	ldd	r24, Y+41	; 0x29
    1e14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e2       	ldi	r20, 0x20	; 32
    1e1c:	51 e4       	ldi	r21, 0x41	; 65
    1e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9a a3       	std	Y+34, r25	; 0x22
    1e34:	89 a3       	std	Y+33, r24	; 0x21
    1e36:	0f c0       	rjmp	.+30     	; 0x1e56 <Cell_VidParking+0x338>
    1e38:	88 ec       	ldi	r24, 0xC8	; 200
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	98 a3       	std	Y+32, r25	; 0x20
    1e3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e42:	98 a1       	ldd	r25, Y+32	; 0x20
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <Cell_VidParking+0x326>
    1e48:	98 a3       	std	Y+32, r25	; 0x20
    1e4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e50:	01 97       	sbiw	r24, 0x01	; 1
    1e52:	9a a3       	std	Y+34, r25	; 0x22
    1e54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e56:	89 a1       	ldd	r24, Y+33	; 0x21
    1e58:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	69 f7       	brne	.-38     	; 0x1e38 <Cell_VidParking+0x31a>
    1e5e:	14 c0       	rjmp	.+40     	; 0x1e88 <Cell_VidParking+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e60:	6b a1       	ldd	r22, Y+35	; 0x23
    1e62:	7c a1       	ldd	r23, Y+36	; 0x24
    1e64:	8d a1       	ldd	r24, Y+37	; 0x25
    1e66:	9e a1       	ldd	r25, Y+38	; 0x26
    1e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	9a a3       	std	Y+34, r25	; 0x22
    1e72:	89 a3       	std	Y+33, r24	; 0x21
    1e74:	89 a1       	ldd	r24, Y+33	; 0x21
    1e76:	9a a1       	ldd	r25, Y+34	; 0x22
    1e78:	9e 8f       	std	Y+30, r25	; 0x1e
    1e7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	f1 f7       	brne	.-4      	; 0x1e80 <Cell_VidParking+0x362>
    1e84:	9e 8f       	std	Y+30, r25	; 0x1e
    1e86:	8d 8f       	std	Y+29, r24	; 0x1d
               _delay_ms(100);
               LifterLatch_VidGoPark(25,100,Port_A,Pin7,Clockwise,Pin6,Pin5);
    1e88:	89 e1       	ldi	r24, 0x19	; 25
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	64 e6       	ldi	r22, 0x64	; 100
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	27 e0       	ldi	r18, 0x07	; 7
    1e92:	00 e0       	ldi	r16, 0x00	; 0
    1e94:	0f 2e       	mov	r0, r31
    1e96:	f6 e0       	ldi	r31, 0x06	; 6
    1e98:	ef 2e       	mov	r14, r31
    1e9a:	f0 2d       	mov	r31, r0
    1e9c:	0f 2e       	mov	r0, r31
    1e9e:	f5 e0       	ldi	r31, 0x05	; 5
    1ea0:	cf 2e       	mov	r12, r31
    1ea2:	f0 2d       	mov	r31, r0
    1ea4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <LifterLatch_VidGoPark>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a8 ec       	ldi	r26, 0xC8	; 200
    1eae:	b2 e4       	ldi	r27, 0x42	; 66
    1eb0:	89 8f       	std	Y+25, r24	; 0x19
    1eb2:	9a 8f       	std	Y+26, r25	; 0x1a
    1eb4:	ab 8f       	std	Y+27, r26	; 0x1b
    1eb6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	69 8d       	ldd	r22, Y+25	; 0x19
    1eba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	4a ef       	ldi	r20, 0xFA	; 250
    1ec6:	54 e4       	ldi	r21, 0x44	; 68
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8d 8b       	std	Y+21, r24	; 0x15
    1ed2:	9e 8b       	std	Y+22, r25	; 0x16
    1ed4:	af 8b       	std	Y+23, r26	; 0x17
    1ed6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ed8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eda:	7e 89       	ldd	r23, Y+22	; 0x16
    1edc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ede:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	2c f4       	brge	.+10     	; 0x1efa <Cell_VidParking+0x3dc>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9c 8b       	std	Y+20, r25	; 0x14
    1ef6:	8b 8b       	std	Y+19, r24	; 0x13
    1ef8:	3f c0       	rjmp	.+126    	; 0x1f78 <Cell_VidParking+0x45a>
	else if (__tmp > 65535)
    1efa:	6d 89       	ldd	r22, Y+21	; 0x15
    1efc:	7e 89       	ldd	r23, Y+22	; 0x16
    1efe:	8f 89       	ldd	r24, Y+23	; 0x17
    1f00:	98 8d       	ldd	r25, Y+24	; 0x18
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	4c f5       	brge	.+82     	; 0x1f64 <Cell_VidParking+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f12:	69 8d       	ldd	r22, Y+25	; 0x19
    1f14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e2       	ldi	r20, 0x20	; 32
    1f20:	51 e4       	ldi	r21, 0x41	; 65
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9c 8b       	std	Y+20, r25	; 0x14
    1f38:	8b 8b       	std	Y+19, r24	; 0x13
    1f3a:	0f c0       	rjmp	.+30     	; 0x1f5a <Cell_VidParking+0x43c>
    1f3c:	88 ec       	ldi	r24, 0xC8	; 200
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	9a 8b       	std	Y+18, r25	; 0x12
    1f42:	89 8b       	std	Y+17, r24	; 0x11
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	9a 89       	ldd	r25, Y+18	; 0x12
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <Cell_VidParking+0x42a>
    1f4c:	9a 8b       	std	Y+18, r25	; 0x12
    1f4e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f50:	8b 89       	ldd	r24, Y+19	; 0x13
    1f52:	9c 89       	ldd	r25, Y+20	; 0x14
    1f54:	01 97       	sbiw	r24, 0x01	; 1
    1f56:	9c 8b       	std	Y+20, r25	; 0x14
    1f58:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	69 f7       	brne	.-38     	; 0x1f3c <Cell_VidParking+0x41e>
    1f62:	14 c0       	rjmp	.+40     	; 0x1f8c <Cell_VidParking+0x46e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f64:	6d 89       	ldd	r22, Y+21	; 0x15
    1f66:	7e 89       	ldd	r23, Y+22	; 0x16
    1f68:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7c:	98 8b       	std	Y+16, r25	; 0x10
    1f7e:	8f 87       	std	Y+15, r24	; 0x0f
    1f80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f82:	98 89       	ldd	r25, Y+16	; 0x10
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <Cell_VidParking+0x466>
    1f88:	98 8b       	std	Y+16, r25	; 0x10
    1f8a:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(100);
               Lifter_VidGoUp(200,10,Port_D,Pin5,Clockwise,Pin6,Pin7);
    1f8c:	88 ec       	ldi	r24, 0xC8	; 200
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	6a e0       	ldi	r22, 0x0A	; 10
    1f92:	43 e0       	ldi	r20, 0x03	; 3
    1f94:	25 e0       	ldi	r18, 0x05	; 5
    1f96:	00 e0       	ldi	r16, 0x00	; 0
    1f98:	0f 2e       	mov	r0, r31
    1f9a:	f6 e0       	ldi	r31, 0x06	; 6
    1f9c:	ef 2e       	mov	r14, r31
    1f9e:	f0 2d       	mov	r31, r0
    1fa0:	0f 2e       	mov	r0, r31
    1fa2:	f7 e0       	ldi	r31, 0x07	; 7
    1fa4:	cf 2e       	mov	r12, r31
    1fa6:	f0 2d       	mov	r31, r0
    1fa8:	0e 94 85 0a 	call	0x150a	; 0x150a <Lifter_VidGoUp>
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	a8 ec       	ldi	r26, 0xC8	; 200
    1fb2:	b2 e4       	ldi	r27, 0x42	; 66
    1fb4:	8b 87       	std	Y+11, r24	; 0x0b
    1fb6:	9c 87       	std	Y+12, r25	; 0x0c
    1fb8:	ad 87       	std	Y+13, r26	; 0x0d
    1fba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a ef       	ldi	r20, 0xFA	; 250
    1fca:	54 e4       	ldi	r21, 0x44	; 68
    1fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	8f 83       	std	Y+7, r24	; 0x07
    1fd6:	98 87       	std	Y+8, r25	; 0x08
    1fd8:	a9 87       	std	Y+9, r26	; 0x09
    1fda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fde:	78 85       	ldd	r23, Y+8	; 0x08
    1fe0:	89 85       	ldd	r24, Y+9	; 0x09
    1fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e8       	ldi	r20, 0x80	; 128
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	2c f4       	brge	.+10     	; 0x1ffe <Cell_VidParking+0x4e0>
		__ticks = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9e 83       	std	Y+6, r25	; 0x06
    1ffa:	8d 83       	std	Y+5, r24	; 0x05
    1ffc:	3f c0       	rjmp	.+126    	; 0x207c <Cell_VidParking+0x55e>
	else if (__tmp > 65535)
    1ffe:	6f 81       	ldd	r22, Y+7	; 0x07
    2000:	78 85       	ldd	r23, Y+8	; 0x08
    2002:	89 85       	ldd	r24, Y+9	; 0x09
    2004:	9a 85       	ldd	r25, Y+10	; 0x0a
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	4c f5       	brge	.+82     	; 0x2068 <Cell_VidParking+0x54a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2016:	6b 85       	ldd	r22, Y+11	; 0x0b
    2018:	7c 85       	ldd	r23, Y+12	; 0x0c
    201a:	8d 85       	ldd	r24, Y+13	; 0x0d
    201c:	9e 85       	ldd	r25, Y+14	; 0x0e
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	bc 01       	movw	r22, r24
    2030:	cd 01       	movw	r24, r26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
    203e:	0f c0       	rjmp	.+30     	; 0x205e <Cell_VidParking+0x540>
    2040:	88 ec       	ldi	r24, 0xC8	; 200
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	9c 83       	std	Y+4, r25	; 0x04
    2046:	8b 83       	std	Y+3, r24	; 0x03
    2048:	8b 81       	ldd	r24, Y+3	; 0x03
    204a:	9c 81       	ldd	r25, Y+4	; 0x04
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <Cell_VidParking+0x52e>
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	9e 83       	std	Y+6, r25	; 0x06
    205c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205e:	8d 81       	ldd	r24, Y+5	; 0x05
    2060:	9e 81       	ldd	r25, Y+6	; 0x06
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	69 f7       	brne	.-38     	; 0x2040 <Cell_VidParking+0x522>
    2066:	14 c0       	rjmp	.+40     	; 0x2090 <Cell_VidParking+0x572>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	9e 83       	std	Y+6, r25	; 0x06
    207a:	8d 83       	std	Y+5, r24	; 0x05
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	9a 81       	ldd	r25, Y+2	; 0x02
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	f1 f7       	brne	.-4      	; 0x2088 <Cell_VidParking+0x56a>
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
                 break;

}


}
    2090:	c9 5b       	subi	r28, 0xB9	; 185
    2092:	df 4f       	sbci	r29, 0xFF	; 255
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	f8 94       	cli
    2098:	de bf       	out	0x3e, r29	; 62
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	cd bf       	out	0x3d, r28	; 61
    209e:	cf 91       	pop	r28
    20a0:	df 91       	pop	r29
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ef 90       	pop	r14
    20a8:	cf 90       	pop	r12
    20aa:	08 95       	ret

000020ac <Stepper_Setup>:
#include  <util/delay.h>
#include "Stepper_Interface.h"


void Stepper_Setup(u8 Copy_u8Port, u8 Copy_u8Dire_Pin, u8 Copy_u8Step_Pin, u8 Copy_u8EN_Pin )
{   /* Set DIRECTION_PIN, STEP_PIN and EN_PIN as output */
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <Stepper_Setup+0x6>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <Stepper_Setup+0x8>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	6a 83       	std	Y+2, r22	; 0x02
    20bc:	4b 83       	std	Y+3, r20	; 0x03
    20be:	2c 83       	std	Y+4, r18	; 0x04
	DIO_VidSetPinDirection(Copy_u8Port,Copy_u8Dire_Pin,Output);
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	6a 81       	ldd	r22, Y+2	; 0x02
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Copy_u8Port,Copy_u8Step_Pin,Output);
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	6b 81       	ldd	r22, Y+3	; 0x03
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(Copy_u8Port,Copy_u8EN_Pin,Output);
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	6c 81       	ldd	r22, Y+4	; 0x04
    20d8:	41 e0       	ldi	r20, 0x01	; 1
    20da:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>

}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <Stepper_Direction>:


void Stepper_Direction(u8 Copy_u8Direction,u8 Copy_u8Port, u8 Copy_u8Dire_Pin )
{ /*Select The Direction Of Rotation */
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <Stepper_Direction+0x6>
    20f2:	0f 92       	push	r0
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	6a 83       	std	Y+2, r22	; 0x02
    20fc:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == Clockwise)
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	88 23       	and	r24, r24
    2102:	31 f4       	brne	.+12     	; 0x2110 <Stepper_Direction+0x24>
	{
		DIO_VidSetPinValue(Copy_u8Port,Copy_u8Dire_Pin,PinHigh);
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
    2106:	6b 81       	ldd	r22, Y+3	; 0x03
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <Stepper_Direction+0x34>
	}

	else if(Copy_u8Direction == AntiClockwise)
    2110:	89 81       	ldd	r24, Y+1	; 0x01
    2112:	81 30       	cpi	r24, 0x01	; 1
    2114:	29 f4       	brne	.+10     	; 0x2120 <Stepper_Direction+0x34>
		{
			DIO_VidSetPinValue(Copy_u8Port,Copy_u8Dire_Pin,PinLow);
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	6b 81       	ldd	r22, Y+3	; 0x03
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
		}
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <Stepper_Step>:

/* Generate Only One Step */
void Stepper_Step(u8 Copy_u8Port, u8 Copy_u8Step_Pin)
{
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	e2 97       	sbiw	r28, 0x32	; 50
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
    2140:	89 ab       	std	Y+49, r24	; 0x31
    2142:	6a ab       	std	Y+50, r22	; 0x32
	DIO_VidSetPinValue(Copy_u8Port,Copy_u8Step_Pin,PinHigh);
    2144:	89 a9       	ldd	r24, Y+49	; 0x31
    2146:	6a a9       	ldd	r22, Y+50	; 0x32
    2148:	41 e0       	ldi	r20, 0x01	; 1
    214a:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 e0       	ldi	r26, 0x00	; 0
    2154:	b0 e4       	ldi	r27, 0x40	; 64
    2156:	8d a7       	std	Y+45, r24	; 0x2d
    2158:	9e a7       	std	Y+46, r25	; 0x2e
    215a:	af a7       	std	Y+47, r26	; 0x2f
    215c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    215e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2160:	7e a5       	ldd	r23, Y+46	; 0x2e
    2162:	8f a5       	ldd	r24, Y+47	; 0x2f
    2164:	98 a9       	ldd	r25, Y+48	; 0x30
    2166:	2b ea       	ldi	r18, 0xAB	; 171
    2168:	3a ea       	ldi	r19, 0xAA	; 170
    216a:	4a e2       	ldi	r20, 0x2A	; 42
    216c:	50 e4       	ldi	r21, 0x40	; 64
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	89 a7       	std	Y+41, r24	; 0x29
    2178:	9a a7       	std	Y+42, r25	; 0x2a
    217a:	ab a7       	std	Y+43, r26	; 0x2b
    217c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    217e:	69 a5       	ldd	r22, Y+41	; 0x29
    2180:	7a a5       	ldd	r23, Y+42	; 0x2a
    2182:	8b a5       	ldd	r24, Y+43	; 0x2b
    2184:	9c a5       	ldd	r25, Y+44	; 0x2c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	5f e3       	ldi	r21, 0x3F	; 63
    218e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2192:	88 23       	and	r24, r24
    2194:	1c f4       	brge	.+6      	; 0x219c <Stepper_Step+0x70>
		__ticks = 1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	88 a7       	std	Y+40, r24	; 0x28
    219a:	91 c0       	rjmp	.+290    	; 0x22be <Stepper_Step+0x192>
	else if (__tmp > 255)
    219c:	69 a5       	ldd	r22, Y+41	; 0x29
    219e:	7a a5       	ldd	r23, Y+42	; 0x2a
    21a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4f e7       	ldi	r20, 0x7F	; 127
    21aa:	53 e4       	ldi	r21, 0x43	; 67
    21ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b0:	18 16       	cp	r1, r24
    21b2:	0c f0       	brlt	.+2      	; 0x21b6 <Stepper_Step+0x8a>
    21b4:	7b c0       	rjmp	.+246    	; 0x22ac <Stepper_Step+0x180>
	{
		_delay_ms(__us / 1000.0);
    21b6:	6d a5       	ldd	r22, Y+45	; 0x2d
    21b8:	7e a5       	ldd	r23, Y+46	; 0x2e
    21ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    21bc:	98 a9       	ldd	r25, Y+48	; 0x30
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4a e7       	ldi	r20, 0x7A	; 122
    21c4:	54 e4       	ldi	r21, 0x44	; 68
    21c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8c a3       	std	Y+36, r24	; 0x24
    21d0:	9d a3       	std	Y+37, r25	; 0x25
    21d2:	ae a3       	std	Y+38, r26	; 0x26
    21d4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	6c a1       	ldd	r22, Y+36	; 0x24
    21d8:	7d a1       	ldd	r23, Y+37	; 0x25
    21da:	8e a1       	ldd	r24, Y+38	; 0x26
    21dc:	9f a1       	ldd	r25, Y+39	; 0x27
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4a ef       	ldi	r20, 0xFA	; 250
    21e4:	54 e4       	ldi	r21, 0x44	; 68
    21e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	88 a3       	std	Y+32, r24	; 0x20
    21f0:	99 a3       	std	Y+33, r25	; 0x21
    21f2:	aa a3       	std	Y+34, r26	; 0x22
    21f4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21f6:	68 a1       	ldd	r22, Y+32	; 0x20
    21f8:	79 a1       	ldd	r23, Y+33	; 0x21
    21fa:	8a a1       	ldd	r24, Y+34	; 0x22
    21fc:	9b a1       	ldd	r25, Y+35	; 0x23
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	2c f4       	brge	.+10     	; 0x2218 <Stepper_Step+0xec>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9f 8f       	std	Y+31, r25	; 0x1f
    2214:	8e 8f       	std	Y+30, r24	; 0x1e
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <Stepper_Step+0x16a>
	else if (__tmp > 65535)
    2218:	68 a1       	ldd	r22, Y+32	; 0x20
    221a:	79 a1       	ldd	r23, Y+33	; 0x21
    221c:	8a a1       	ldd	r24, Y+34	; 0x22
    221e:	9b a1       	ldd	r25, Y+35	; 0x23
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	4c f5       	brge	.+82     	; 0x2282 <Stepper_Step+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	6c a1       	ldd	r22, Y+36	; 0x24
    2232:	7d a1       	ldd	r23, Y+37	; 0x25
    2234:	8e a1       	ldd	r24, Y+38	; 0x26
    2236:	9f a1       	ldd	r25, Y+39	; 0x27
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e2       	ldi	r20, 0x20	; 32
    223e:	51 e4       	ldi	r21, 0x41	; 65
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	9f 8f       	std	Y+31, r25	; 0x1f
    2256:	8e 8f       	std	Y+30, r24	; 0x1e
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <Stepper_Step+0x14c>
    225a:	88 ec       	ldi	r24, 0xC8	; 200
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	9d 8f       	std	Y+29, r25	; 0x1d
    2260:	8c 8f       	std	Y+28, r24	; 0x1c
    2262:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2264:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <Stepper_Step+0x13a>
    226a:	9d 8f       	std	Y+29, r25	; 0x1d
    226c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2270:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	9f 8f       	std	Y+31, r25	; 0x1f
    2276:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2278:	8e 8d       	ldd	r24, Y+30	; 0x1e
    227a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f7       	brne	.-38     	; 0x225a <Stepper_Step+0x12e>
    2280:	24 c0       	rjmp	.+72     	; 0x22ca <Stepper_Step+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	68 a1       	ldd	r22, Y+32	; 0x20
    2284:	79 a1       	ldd	r23, Y+33	; 0x21
    2286:	8a a1       	ldd	r24, Y+34	; 0x22
    2288:	9b a1       	ldd	r25, Y+35	; 0x23
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9f 8f       	std	Y+31, r25	; 0x1f
    2294:	8e 8f       	std	Y+30, r24	; 0x1e
    2296:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2298:	9f 8d       	ldd	r25, Y+31	; 0x1f
    229a:	9b 8f       	std	Y+27, r25	; 0x1b
    229c:	8a 8f       	std	Y+26, r24	; 0x1a
    229e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <Stepper_Step+0x176>
    22a6:	9b 8f       	std	Y+27, r25	; 0x1b
    22a8:	8a 8f       	std	Y+26, r24	; 0x1a
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <Stepper_Step+0x19e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22ac:	69 a5       	ldd	r22, Y+41	; 0x29
    22ae:	7a a5       	ldd	r23, Y+42	; 0x2a
    22b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	88 a7       	std	Y+40, r24	; 0x28
    22be:	88 a5       	ldd	r24, Y+40	; 0x28
    22c0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22c2:	89 8d       	ldd	r24, Y+25	; 0x19
    22c4:	8a 95       	dec	r24
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <Stepper_Step+0x198>
    22c8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);
	DIO_VidSetPinValue(Copy_u8Port,Copy_u8Step_Pin,PinLow);
    22ca:	89 a9       	ldd	r24, Y+49	; 0x31
    22cc:	6a a9       	ldd	r22, Y+50	; 0x32
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	a0 e0       	ldi	r26, 0x00	; 0
    22da:	b0 e4       	ldi	r27, 0x40	; 64
    22dc:	8d 8b       	std	Y+21, r24	; 0x15
    22de:	9e 8b       	std	Y+22, r25	; 0x16
    22e0:	af 8b       	std	Y+23, r26	; 0x17
    22e2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22e4:	6d 89       	ldd	r22, Y+21	; 0x15
    22e6:	7e 89       	ldd	r23, Y+22	; 0x16
    22e8:	8f 89       	ldd	r24, Y+23	; 0x17
    22ea:	98 8d       	ldd	r25, Y+24	; 0x18
    22ec:	2b ea       	ldi	r18, 0xAB	; 171
    22ee:	3a ea       	ldi	r19, 0xAA	; 170
    22f0:	4a e2       	ldi	r20, 0x2A	; 42
    22f2:	50 e4       	ldi	r21, 0x40	; 64
    22f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	89 8b       	std	Y+17, r24	; 0x11
    22fe:	9a 8b       	std	Y+18, r25	; 0x12
    2300:	ab 8b       	std	Y+19, r26	; 0x13
    2302:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2304:	69 89       	ldd	r22, Y+17	; 0x11
    2306:	7a 89       	ldd	r23, Y+18	; 0x12
    2308:	8b 89       	ldd	r24, Y+19	; 0x13
    230a:	9c 89       	ldd	r25, Y+20	; 0x14
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e8       	ldi	r20, 0x80	; 128
    2312:	5f e3       	ldi	r21, 0x3F	; 63
    2314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2318:	88 23       	and	r24, r24
    231a:	1c f4       	brge	.+6      	; 0x2322 <Stepper_Step+0x1f6>
		__ticks = 1;
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	88 8b       	std	Y+16, r24	; 0x10
    2320:	91 c0       	rjmp	.+290    	; 0x2444 <Stepper_Step+0x318>
	else if (__tmp > 255)
    2322:	69 89       	ldd	r22, Y+17	; 0x11
    2324:	7a 89       	ldd	r23, Y+18	; 0x12
    2326:	8b 89       	ldd	r24, Y+19	; 0x13
    2328:	9c 89       	ldd	r25, Y+20	; 0x14
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	4f e7       	ldi	r20, 0x7F	; 127
    2330:	53 e4       	ldi	r21, 0x43	; 67
    2332:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2336:	18 16       	cp	r1, r24
    2338:	0c f0       	brlt	.+2      	; 0x233c <Stepper_Step+0x210>
    233a:	7b c0       	rjmp	.+246    	; 0x2432 <Stepper_Step+0x306>
	{
		_delay_ms(__us / 1000.0);
    233c:	6d 89       	ldd	r22, Y+21	; 0x15
    233e:	7e 89       	ldd	r23, Y+22	; 0x16
    2340:	8f 89       	ldd	r24, Y+23	; 0x17
    2342:	98 8d       	ldd	r25, Y+24	; 0x18
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	4a e7       	ldi	r20, 0x7A	; 122
    234a:	54 e4       	ldi	r21, 0x44	; 68
    234c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	8c 87       	std	Y+12, r24	; 0x0c
    2356:	9d 87       	std	Y+13, r25	; 0x0d
    2358:	ae 87       	std	Y+14, r26	; 0x0e
    235a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235c:	6c 85       	ldd	r22, Y+12	; 0x0c
    235e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2360:	8e 85       	ldd	r24, Y+14	; 0x0e
    2362:	9f 85       	ldd	r25, Y+15	; 0x0f
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	4a ef       	ldi	r20, 0xFA	; 250
    236a:	54 e4       	ldi	r21, 0x44	; 68
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	88 87       	std	Y+8, r24	; 0x08
    2376:	99 87       	std	Y+9, r25	; 0x09
    2378:	aa 87       	std	Y+10, r26	; 0x0a
    237a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    237c:	68 85       	ldd	r22, Y+8	; 0x08
    237e:	79 85       	ldd	r23, Y+9	; 0x09
    2380:	8a 85       	ldd	r24, Y+10	; 0x0a
    2382:	9b 85       	ldd	r25, Y+11	; 0x0b
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	40 e8       	ldi	r20, 0x80	; 128
    238a:	5f e3       	ldi	r21, 0x3F	; 63
    238c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2390:	88 23       	and	r24, r24
    2392:	2c f4       	brge	.+10     	; 0x239e <Stepper_Step+0x272>
		__ticks = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9f 83       	std	Y+7, r25	; 0x07
    239a:	8e 83       	std	Y+6, r24	; 0x06
    239c:	3f c0       	rjmp	.+126    	; 0x241c <Stepper_Step+0x2f0>
	else if (__tmp > 65535)
    239e:	68 85       	ldd	r22, Y+8	; 0x08
    23a0:	79 85       	ldd	r23, Y+9	; 0x09
    23a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	4c f5       	brge	.+82     	; 0x2408 <Stepper_Step+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b6:	6c 85       	ldd	r22, Y+12	; 0x0c
    23b8:	7d 85       	ldd	r23, Y+13	; 0x0d
    23ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    23bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e2       	ldi	r20, 0x20	; 32
    23c4:	51 e4       	ldi	r21, 0x41	; 65
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	bc 01       	movw	r22, r24
    23d0:	cd 01       	movw	r24, r26
    23d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d6:	dc 01       	movw	r26, r24
    23d8:	cb 01       	movw	r24, r22
    23da:	9f 83       	std	Y+7, r25	; 0x07
    23dc:	8e 83       	std	Y+6, r24	; 0x06
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <Stepper_Step+0x2d2>
    23e0:	88 ec       	ldi	r24, 0xC8	; 200
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	9d 83       	std	Y+5, r25	; 0x05
    23e6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ea:	9d 81       	ldd	r25, Y+5	; 0x05
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <Stepper_Step+0x2c0>
    23f0:	9d 83       	std	Y+5, r25	; 0x05
    23f2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f4:	8e 81       	ldd	r24, Y+6	; 0x06
    23f6:	9f 81       	ldd	r25, Y+7	; 0x07
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	9f 83       	std	Y+7, r25	; 0x07
    23fc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2400:	9f 81       	ldd	r25, Y+7	; 0x07
    2402:	00 97       	sbiw	r24, 0x00	; 0
    2404:	69 f7       	brne	.-38     	; 0x23e0 <Stepper_Step+0x2b4>
    2406:	24 c0       	rjmp	.+72     	; 0x2450 <Stepper_Step+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2408:	68 85       	ldd	r22, Y+8	; 0x08
    240a:	79 85       	ldd	r23, Y+9	; 0x09
    240c:	8a 85       	ldd	r24, Y+10	; 0x0a
    240e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9f 83       	std	Y+7, r25	; 0x07
    241a:	8e 83       	std	Y+6, r24	; 0x06
    241c:	8e 81       	ldd	r24, Y+6	; 0x06
    241e:	9f 81       	ldd	r25, Y+7	; 0x07
    2420:	9b 83       	std	Y+3, r25	; 0x03
    2422:	8a 83       	std	Y+2, r24	; 0x02
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	9b 81       	ldd	r25, Y+3	; 0x03
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <Stepper_Step+0x2fc>
    242c:	9b 83       	std	Y+3, r25	; 0x03
    242e:	8a 83       	std	Y+2, r24	; 0x02
    2430:	0f c0       	rjmp	.+30     	; 0x2450 <Stepper_Step+0x324>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2432:	69 89       	ldd	r22, Y+17	; 0x11
    2434:	7a 89       	ldd	r23, Y+18	; 0x12
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	88 8b       	std	Y+16, r24	; 0x10
    2444:	88 89       	ldd	r24, Y+16	; 0x10
    2446:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	8a 95       	dec	r24
    244c:	f1 f7       	brne	.-4      	; 0x244a <Stepper_Step+0x31e>
    244e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
}
    2450:	e2 96       	adiw	r28, 0x32	; 50
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	08 95       	ret

00002462 <Stepper_SetNumberOfStep>:
/* Generate a chain of steps with delay */
void Stepper_SetNumberOfStep(u16 Copy_u16NumSteps, u16 Copy_u16DelayBetweenSteps,u8 Copy_u8Port, u8 Copy_u8Step_Pin)
{
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	66 97       	sbiw	r28, 0x16	; 22
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	9a 8b       	std	Y+18, r25	; 0x12
    2478:	89 8b       	std	Y+17, r24	; 0x11
    247a:	7c 8b       	std	Y+20, r23	; 0x14
    247c:	6b 8b       	std	Y+19, r22	; 0x13
    247e:	4d 8b       	std	Y+21, r20	; 0x15
    2480:	2e 8b       	std	Y+22, r18	; 0x16
	for(u16 i =0 ; i<Copy_u16NumSteps; i++)
    2482:	18 8a       	std	Y+16, r1	; 0x10
    2484:	1f 86       	std	Y+15, r1	; 0x0f
    2486:	82 c0       	rjmp	.+260    	; 0x258c <Stepper_SetNumberOfStep+0x12a>
	{
		Stepper_Step(Copy_u8Port,Copy_u8Step_Pin);
    2488:	8d 89       	ldd	r24, Y+21	; 0x15
    248a:	6e 89       	ldd	r22, Y+22	; 0x16
    248c:	0e 94 96 10 	call	0x212c	; 0x212c <Stepper_Step>
		_delay_ms(Copy_u16DelayBetweenSteps);
    2490:	8b 89       	ldd	r24, Y+19	; 0x13
    2492:	9c 89       	ldd	r25, Y+20	; 0x14
    2494:	cc 01       	movw	r24, r24
    2496:	a0 e0       	ldi	r26, 0x00	; 0
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8b 87       	std	Y+11, r24	; 0x0b
    24a8:	9c 87       	std	Y+12, r25	; 0x0c
    24aa:	ad 87       	std	Y+13, r26	; 0x0d
    24ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a ef       	ldi	r20, 0xFA	; 250
    24bc:	54 e4       	ldi	r21, 0x44	; 68
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	8f 83       	std	Y+7, r24	; 0x07
    24c8:	98 87       	std	Y+8, r25	; 0x08
    24ca:	a9 87       	std	Y+9, r26	; 0x09
    24cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ce:	6f 81       	ldd	r22, Y+7	; 0x07
    24d0:	78 85       	ldd	r23, Y+8	; 0x08
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e2:	88 23       	and	r24, r24
    24e4:	2c f4       	brge	.+10     	; 0x24f0 <Stepper_SetNumberOfStep+0x8e>
		__ticks = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9e 83       	std	Y+6, r25	; 0x06
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	3f c0       	rjmp	.+126    	; 0x256e <Stepper_SetNumberOfStep+0x10c>
	else if (__tmp > 65535)
    24f0:	6f 81       	ldd	r22, Y+7	; 0x07
    24f2:	78 85       	ldd	r23, Y+8	; 0x08
    24f4:	89 85       	ldd	r24, Y+9	; 0x09
    24f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	3f ef       	ldi	r19, 0xFF	; 255
    24fc:	4f e7       	ldi	r20, 0x7F	; 127
    24fe:	57 e4       	ldi	r21, 0x47	; 71
    2500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2504:	18 16       	cp	r1, r24
    2506:	4c f5       	brge	.+82     	; 0x255a <Stepper_SetNumberOfStep+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2508:	6b 85       	ldd	r22, Y+11	; 0x0b
    250a:	7c 85       	ldd	r23, Y+12	; 0x0c
    250c:	8d 85       	ldd	r24, Y+13	; 0x0d
    250e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <Stepper_SetNumberOfStep+0xee>
    2532:	88 ec       	ldi	r24, 0xC8	; 200
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	9c 81       	ldd	r25, Y+4	; 0x04
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <Stepper_SetNumberOfStep+0xdc>
    2542:	9c 83       	std	Y+4, r25	; 0x04
    2544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8d 81       	ldd	r24, Y+5	; 0x05
    2548:	9e 81       	ldd	r25, Y+6	; 0x06
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9e 83       	std	Y+6, r25	; 0x06
    254e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <Stepper_SetNumberOfStep+0xd0>
    2558:	14 c0       	rjmp	.+40     	; 0x2582 <Stepper_SetNumberOfStep+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2566:	dc 01       	movw	r26, r24
    2568:	cb 01       	movw	r24, r22
    256a:	9e 83       	std	Y+6, r25	; 0x06
    256c:	8d 83       	std	Y+5, r24	; 0x05
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <Stepper_SetNumberOfStep+0x118>
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);
}
/* Generate a chain of steps with delay */
void Stepper_SetNumberOfStep(u16 Copy_u16NumSteps, u16 Copy_u16DelayBetweenSteps,u8 Copy_u8Port, u8 Copy_u8Step_Pin)
{
	for(u16 i =0 ; i<Copy_u16NumSteps; i++)
    2582:	8f 85       	ldd	r24, Y+15	; 0x0f
    2584:	98 89       	ldd	r25, Y+16	; 0x10
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	98 8b       	std	Y+16, r25	; 0x10
    258a:	8f 87       	std	Y+15, r24	; 0x0f
    258c:	2f 85       	ldd	r18, Y+15	; 0x0f
    258e:	38 89       	ldd	r19, Y+16	; 0x10
    2590:	89 89       	ldd	r24, Y+17	; 0x11
    2592:	9a 89       	ldd	r25, Y+18	; 0x12
    2594:	28 17       	cp	r18, r24
    2596:	39 07       	cpc	r19, r25
    2598:	08 f4       	brcc	.+2      	; 0x259c <Stepper_SetNumberOfStep+0x13a>
    259a:	76 cf       	rjmp	.-276    	; 0x2488 <Stepper_SetNumberOfStep+0x26>
	{
		Stepper_Step(Copy_u8Port,Copy_u8Step_Pin);
		_delay_ms(Copy_u16DelayBetweenSteps);
	}

}
    259c:	66 96       	adiw	r28, 0x16	; 22
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	08 95       	ret

000025ae <Stepper_Enable>:
/* Set A Status Of Motor On / Off */
void Stepper_Enable(u8 Copy_u8enable,u8 Copy_u8Port, u8 Copy_u8EN_Pin)
{
    25ae:	df 93       	push	r29
    25b0:	cf 93       	push	r28
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <Stepper_Enable+0x6>
    25b4:	0f 92       	push	r0
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	6a 83       	std	Y+2, r22	; 0x02
    25be:	4b 83       	std	Y+3, r20	; 0x03

  if(Copy_u8enable == En_On)
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <Stepper_Enable+0x22>
	{
	  DIO_VidSetPinValue(Copy_u8Port,Copy_u8EN_Pin,PinLow);
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	6b 81       	ldd	r22, Y+3	; 0x03
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
	}

  if(Copy_u8enable == En_Off)
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	88 23       	and	r24, r24
    25d4:	29 f4       	brne	.+10     	; 0x25e0 <Stepper_Enable+0x32>
	{
	  DIO_VidSetPinValue(Copy_u8Port,Copy_u8EN_Pin,PinHigh);
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	6b 81       	ldd	r22, Y+3	; 0x03
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 17 08 	call	0x102e	; 0x102e <DIO_VidSetPinValue>
	}

}
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <TIMER1_VidInit_CTCMode>:
#include "TIM1_Private.h"


/* This function generate flag after 1 micro sec */
void TIMER1_VidInit_CTCMode(void)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
	    /* SET CTC WITH TOP OCR1A*/
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    25f4:	ae e4       	ldi	r26, 0x4E	; 78
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ee e4       	ldi	r30, 0x4E	; 78
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	88 60       	ori	r24, 0x08	; 8
    2600:	8c 93       	st	X, r24
		/*Set Timer1 to count 1 micro sec */
		OCR1AL=1;
    2602:	ea e4       	ldi	r30, 0x4A	; 74
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
		/*SET Pre-scaler value divided by 8 */
		TCCR1B &= 0b11111000; // clear pre-scaler
    260e:	ae e4       	ldi	r26, 0x4E	; 78
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	ee e4       	ldi	r30, 0x4E	; 78
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	80 81       	ld	r24, Z
    2618:	88 7f       	andi	r24, 0xF8	; 248
    261a:	8c 93       	st	X, r24
		TCCR1B |= 2;
    261c:	ae e4       	ldi	r26, 0x4E	; 78
    261e:	b0 e0       	ldi	r27, 0x00	; 0
    2620:	ee e4       	ldi	r30, 0x4E	; 78
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	80 81       	ld	r24, Z
    2626:	82 60       	ori	r24, 0x02	; 2
    2628:	8c 93       	st	X, r24
}
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <Timer1_SetCTC_OCR1A_Value>:

void Timer1_SetCTC_OCR1A_Value(u16 Copy_u16OCR1A_Value)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	00 d0       	rcall	.+0      	; 0x2636 <Timer1_SetCTC_OCR1A_Value+0x6>
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	9a 83       	std	Y+2, r25	; 0x02
    263c:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL=Copy_u16OCR1A_Value;
    263e:	ea e4       	ldi	r30, 0x4A	; 74
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	91 83       	std	Z+1, r25	; 0x01
    2648:	80 83       	st	Z, r24
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <Timer1_SetDelay_Micro>:


 /* Function with micro delay */
void Timer1_SetDelay_Micro(u32 Copy_DelayValue)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <Timer1_SetDelay_Micro+0x6>
    265a:	00 d0       	rcall	.+0      	; 0x265c <Timer1_SetDelay_Micro+0x8>
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	8b 83       	std	Y+3, r24	; 0x03
	TCNT1L = 0;                                  // Reset Timer1 counter
    2664:	ec e4       	ldi	r30, 0x4C	; 76
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	11 82       	std	Z+1, r1	; 0x01
    266a:	10 82       	st	Z, r1
	TIFR |= (1 << TIFR_OCF1A);                   // Clear Timer1 compare match flag
    266c:	a8 e5       	ldi	r26, 0x58	; 88
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	e8 e5       	ldi	r30, 0x58	; 88
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	80 61       	ori	r24, 0x10	; 16
    2678:	8c 93       	st	X, r24
	for(u32 i=0;i<Copy_DelayValue;i++)
    267a:	1a 82       	std	Y+2, r1	; 0x02
    267c:	19 82       	std	Y+1, r1	; 0x01
    267e:	17 c0       	rjmp	.+46     	; 0x26ae <Timer1_SetDelay_Micro+0x5a>
	{
		while(((TIFR>>TIFR_OCF1A)&(0x01)) == 0); // Check flag if 1 then 1 micro sec it passed
    2680:	e8 e5       	ldi	r30, 0x58	; 88
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	82 95       	swap	r24
    2688:	8f 70       	andi	r24, 0x0F	; 15
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	81 70       	andi	r24, 0x01	; 1
    2690:	90 70       	andi	r25, 0x00	; 0
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	a9 f3       	breq	.-22     	; 0x2680 <Timer1_SetDelay_Micro+0x2c>
		TIFR |=(1<<TIFR_OCF1A);                  // Clear Timer1 compare match flag
    2696:	a8 e5       	ldi	r26, 0x58	; 88
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e8 e5       	ldi	r30, 0x58	; 88
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	80 61       	ori	r24, 0x10	; 16
    26a2:	8c 93       	st	X, r24
 /* Function with micro delay */
void Timer1_SetDelay_Micro(u32 Copy_DelayValue)
{
	TCNT1L = 0;                                  // Reset Timer1 counter
	TIFR |= (1 << TIFR_OCF1A);                   // Clear Timer1 compare match flag
	for(u32 i=0;i<Copy_DelayValue;i++)
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	01 96       	adiw	r24, 0x01	; 1
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	29 81       	ldd	r18, Y+1	; 0x01
    26b0:	3a 81       	ldd	r19, Y+2	; 0x02
    26b2:	8b 81       	ldd	r24, Y+3	; 0x03
    26b4:	9c 81       	ldd	r25, Y+4	; 0x04
    26b6:	28 17       	cp	r18, r24
    26b8:	39 07       	cpc	r19, r25
    26ba:	10 f3       	brcs	.-60     	; 0x2680 <Timer1_SetDelay_Micro+0x2c>
	{
		while(((TIFR>>TIFR_OCF1A)&(0x01)) == 0); // Check flag if 1 then 1 micro sec it passed
		TIFR |=(1<<TIFR_OCF1A);                  // Clear Timer1 compare match flag
	}

	TCCR1B &= ~(1 << TCCR1B_CS12);  // Turn off Timer1
    26bc:	ae e4       	ldi	r26, 0x4E	; 78
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	ee e4       	ldi	r30, 0x4E	; 78
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	8b 7f       	andi	r24, 0xFB	; 251
    26c8:	8c 93       	st	X, r24
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	cf 91       	pop	r28
    26d4:	df 91       	pop	r29
    26d6:	08 95       	ret

000026d8 <USART_VidIniti>:
#include "USART_Reg.h"
#include "USART_Private.h"
#include "USART_Config.h"
#include <util/delay.h>

void USART_VidIniti(void){
    26d8:	df 93       	push	r29
    26da:	cf 93       	push	r28
    26dc:	00 d0       	rcall	.+0      	; 0x26de <USART_VidIniti+0x6>
    26de:	0f 92       	push	r0
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC=0b10000000;
    26e4:	80 e8       	ldi	r24, 0x80	; 128
    26e6:	8b 83       	std	Y+3, r24	; 0x03
/*Select Synchronization mode*/
#if  SYNCHRO_MODE == DISABLE
	CLR_BIT(Local_u8UCSRC,UCSRC_UMSEL);
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	8f 7b       	andi	r24, 0xBF	; 191
    26ec:	8b 83       	std	Y+3, r24	; 0x03
#elif CHAR_SIZE == DATA_7_BIT
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
	CLR_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
#elif CHAR_SIZE == DATA_8_BIT
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ1);
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	84 60       	ori	r24, 0x04	; 4
    26f2:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	82 60       	ori	r24, 0x02	; 2
    26f8:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    26fa:	aa e2       	ldi	r26, 0x2A	; 42
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	ea e2       	ldi	r30, 0x2A	; 42
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	80 81       	ld	r24, Z
    2704:	8b 7f       	andi	r24, 0xFB	; 251
    2706:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRC,UCSRC_UCSZ0);
	SET_BIT(UCSRB,UCSRB_UCSZ2);
#endif
	/*select parity mode (Disable)*/
#if PARITY_CHECK == DISABLE
	CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	8f 7e       	andi	r24, 0xEF	; 239
    270c:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRC,UCSRC_UPM1);
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	8f 7d       	andi	r24, 0xDF	; 223
    2712:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRC,UCSRC_UPM0);
	SET_BIT(Local_u8UCSRC,UCSRC_UPM1);
#endif
	/*Set stop bit selection*/
#if STOP_BIT == ONE_STOP_BITS
	CLR_BIT(Local_u8UCSRC,UCSRC_USBS);
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	87 7f       	andi	r24, 0xF7	; 247
    2718:	8b 83       	std	Y+3, r24	; 0x03
#elif STOP_BIT == TWO_STOP_BITS
	SET_BIT(Local_u8UCSRC,UCSRC_USBS);
#endif
/*Clock Polarity In Synchr_Mode */
#if CLOCK_POLARITY == RISING_TX_FALLING_RX
	CLR_BIT(Local_u8UCSRC,UCSRC_UCPOL);
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	8e 7f       	andi	r24, 0xFE	; 254
    271e:	8b 83       	std	Y+3, r24	; 0x03
#elif CLOCK_POLARITY == FALLING_TX_RISING_RX
	SET_BIT(Local_u8UCSRC,UCSRC_UCPOL);
#endif

UCSRC=Local_u8UCSRC;
    2720:	e0 e4       	ldi	r30, 0x40	; 64
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	80 83       	st	Z, r24
/************************************************ UCSRA ************************************************************/
     #if   USART_TX_SPEED == NORMAL
	   CLR_BIT(UCSRA,UCSRA_U2X);
    2728:	ab e2       	ldi	r26, 0x2B	; 43
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	eb e2       	ldi	r30, 0x2B	; 43
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8d 7f       	andi	r24, 0xFD	; 253
    2734:	8c 93       	st	X, r24
     #elif  USART_TX_SPEED == DOUBLED
	   CLR_BIT(UCSRA,UCSRA_U2X);
     #endif
     #if  MULTI_PROCESSOR_MODE == DISABLE
	   CLR_BIT(UCSRA,UCSRA_MPCM);
    2736:	ab e2       	ldi	r26, 0x2B	; 43
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	eb e2       	ldi	r30, 0x2B	; 43
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8e 7f       	andi	r24, 0xFE	; 254
    2742:	8c 93       	st	X, r24
	   SET_BIT(UCSRA,UCSRA_MPCM);
     #endif

/**************************************************** UCSRB *********************************************************/
    #if     USART_RX_INTERRUPT == DISABLE
            CLR_BIT(UCSRB,UCSRB_RXCIE);
    2744:	aa e2       	ldi	r26, 0x2A	; 42
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	ea e2       	ldi	r30, 0x2A	; 42
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	8f 77       	andi	r24, 0x7F	; 127
    2750:	8c 93       	st	X, r24
    #elif   USART_RX_INTERRUPR == ENABLE
            SET_BIT(UCSRB,UCSRB_RXCIE);
    #endif

    #if     USART_TX_INTERRUPT == DISABLE
            CLR_BIT(UCSRB,UCSRB_TXCIE);
    2752:	aa e2       	ldi	r26, 0x2A	; 42
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ea e2       	ldi	r30, 0x2A	; 42
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	8f 7b       	andi	r24, 0xBF	; 191
    275e:	8c 93       	st	X, r24
    #elif   USART_TX_INTERRUPR == ENABLE
            SET_BIT(UCSRB,UCSRB_TXCIE);
    #endif

    #if     USART_UDRE_INTERRUPT == DISABLE
            CLR_BIT(UCSRB,UCSRB_UDRIE);
    2760:	aa e2       	ldi	r26, 0x2A	; 42
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ea e2       	ldi	r30, 0x2A	; 42
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8f 7d       	andi	r24, 0xDF	; 223
    276c:	8c 93       	st	X, r24

  /*Set Tx and Rx Mode*/
   #if     USART_TX_EN == DISABLE
           CLR_BIT(UCSRB,UCSRB_TXEN);
   #elif   USART_TX_EN == ENABLE
           SET_BIT(UCSRB,UCSRB_TXEN);
    276e:	aa e2       	ldi	r26, 0x2A	; 42
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ea e2       	ldi	r30, 0x2A	; 42
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 60       	ori	r24, 0x08	; 8
    277a:	8c 93       	st	X, r24
   #endif

   #if     USART_RX_EN == DISABLE
           CLR_BIT(UCSRB,UCSRB_RXEN);
   #elif   USART_RX_EN == ENABLE
           SET_BIT(UCSRB,UCSRB_RXEN);
    277c:	aa e2       	ldi	r26, 0x2A	; 42
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ea e2       	ldi	r30, 0x2A	; 42
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	80 61       	ori	r24, 0x10	; 16
    2788:	8c 93       	st	X, r24
   #endif

	   /*Baud Rate Value*/

     u16 Local_u16UBRRValue ;
      Local_u16UBRRValue = BAUD_RATE;
    278a:	83 e3       	ldi	r24, 0x33	; 51
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	9a 83       	std	Y+2, r25	; 0x02
    2790:	89 83       	std	Y+1, r24	; 0x01
      UBRRL=(u8)Local_u16UBRRValue;
    2792:	e9 e2       	ldi	r30, 0x29	; 41
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	80 83       	st	Z, r24
      UBRRH=(u8)(Local_u16UBRRValue>>8);
    279a:	e0 e4       	ldi	r30, 0x40	; 64
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	89 2f       	mov	r24, r25
    27a4:	99 27       	eor	r25, r25
    27a6:	80 83       	st	Z, r24

}
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <USART_VidTransmitData>:

void USART_VidTransmitData(u16 Copy_u16TransmittedData){
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <USART_VidTransmitData+0x6>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
	while((GET_BIT(UCSRA,UCSRA_UDRE))!=1);
    27c2:	eb e2       	ldi	r30, 0x2B	; 43
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	82 95       	swap	r24
    27ca:	86 95       	lsr	r24
    27cc:	87 70       	andi	r24, 0x07	; 7
    27ce:	88 2f       	mov	r24, r24
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	81 70       	andi	r24, 0x01	; 1
    27d4:	90 70       	andi	r25, 0x00	; 0
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	a1 f3       	breq	.-24     	; 0x27c2 <USART_VidTransmitData+0xe>
	UDR=Copy_u16TransmittedData;
    27da:	ec e2       	ldi	r30, 0x2C	; 44
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	80 83       	st	Z, r24
	UCSRB |=((Copy_u16TransmittedData>>8)&(1));
    27e2:	aa e2       	ldi	r26, 0x2A	; 42
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	ea e2       	ldi	r30, 0x2A	; 42
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	20 81       	ld	r18, Z
    27ec:	89 81       	ldd	r24, Y+1	; 0x01
    27ee:	9a 81       	ldd	r25, Y+2	; 0x02
    27f0:	89 2f       	mov	r24, r25
    27f2:	99 27       	eor	r25, r25
    27f4:	81 70       	andi	r24, 0x01	; 1
    27f6:	82 2b       	or	r24, r18
    27f8:	8c 93       	st	X, r24
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	cf 91       	pop	r28
    2800:	df 91       	pop	r29
    2802:	08 95       	ret

00002804 <USART_u16ReceivedData>:

u8 USART_u16ReceivedData(void){
    2804:	df 93       	push	r29
    2806:	cf 93       	push	r28
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
	while((GET_BIT(UCSRA,UCSRA_RXC))!=1);
    280c:	eb e2       	ldi	r30, 0x2B	; 43
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	88 1f       	adc	r24, r24
    2814:	88 27       	eor	r24, r24
    2816:	88 1f       	adc	r24, r24
    2818:	81 30       	cpi	r24, 0x01	; 1
    281a:	c1 f7       	brne	.-16     	; 0x280c <USART_u16ReceivedData+0x8>

	return UDR;
    281c:	ec e2       	ldi	r30, 0x2C	; 44
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z

}
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <USART_VidAsynchroBaudRate>:


void USART_VidAsynchroBaudRate(u16 Copy_u16BaudRateValue,u8 Copy_u8SpeedMode,u32 Copy_u32Freq){
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	27 97       	sbiw	r28, 0x07	; 7
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	9c 83       	std	Y+4, r25	; 0x04
    283e:	8b 83       	std	Y+3, r24	; 0x03
    2840:	6d 83       	std	Y+5, r22	; 0x05
    2842:	5f 83       	std	Y+7, r21	; 0x07
    2844:	4e 83       	std	Y+6, r20	; 0x06

u16 Local_u16BRRValue=0;
    2846:	1a 82       	std	Y+2, r1	; 0x02
    2848:	19 82       	std	Y+1, r1	; 0x01
 if(Copy_u8SpeedMode==DISABLE){
    284a:	8d 81       	ldd	r24, Y+5	; 0x05
    284c:	86 36       	cpi	r24, 0x66	; 102
    284e:	e9 f4       	brne	.+58     	; 0x288a <USART_VidAsynchroBaudRate+0x62>
     Local_u16BRRValue=(Copy_u32Freq/(16*(Copy_u16BaudRateValue)))-1;
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	9c 01       	movw	r18, r24
    2856:	22 95       	swap	r18
    2858:	32 95       	swap	r19
    285a:	30 7f       	andi	r19, 0xF0	; 240
    285c:	32 27       	eor	r19, r18
    285e:	20 7f       	andi	r18, 0xF0	; 240
    2860:	32 27       	eor	r19, r18
    2862:	8e 81       	ldd	r24, Y+6	; 0x06
    2864:	9f 81       	ldd	r25, Y+7	; 0x07
    2866:	b9 01       	movw	r22, r18
    2868:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__udivmodhi4>
    286c:	cb 01       	movw	r24, r22
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
     UBRRL=Local_u16BRRValue;
    2874:	e9 e2       	ldi	r30, 0x29	; 41
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	80 83       	st	Z, r24
     UBRRH=(Local_u16BRRValue>>8);
    287c:	e0 e4       	ldi	r30, 0x40	; 64
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	89 2f       	mov	r24, r25
    2886:	99 27       	eor	r25, r25
    2888:	80 83       	st	Z, r24
 }
 if(Copy_u8SpeedMode==ENABLE){
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	87 36       	cpi	r24, 0x67	; 103
    288e:	e9 f4       	brne	.+58     	; 0x28ca <USART_VidAsynchroBaudRate+0xa2>
      Local_u16BRRValue=(Copy_u32Freq/(8*(Copy_u16BaudRateValue)))-1;
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	9c 81       	ldd	r25, Y+4	; 0x04
    2894:	9c 01       	movw	r18, r24
    2896:	22 0f       	add	r18, r18
    2898:	33 1f       	adc	r19, r19
    289a:	22 0f       	add	r18, r18
    289c:	33 1f       	adc	r19, r19
    289e:	22 0f       	add	r18, r18
    28a0:	33 1f       	adc	r19, r19
    28a2:	8e 81       	ldd	r24, Y+6	; 0x06
    28a4:	9f 81       	ldd	r25, Y+7	; 0x07
    28a6:	b9 01       	movw	r22, r18
    28a8:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__udivmodhi4>
    28ac:	cb 01       	movw	r24, r22
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	9a 83       	std	Y+2, r25	; 0x02
    28b2:	89 83       	std	Y+1, r24	; 0x01
      UBRRL=Local_u16BRRValue;
    28b4:	e9 e2       	ldi	r30, 0x29	; 41
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	80 83       	st	Z, r24
      UBRRH=(Local_u16BRRValue>>8);
    28bc:	e0 e4       	ldi	r30, 0x40	; 64
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	9a 81       	ldd	r25, Y+2	; 0x02
    28c4:	89 2f       	mov	r24, r25
    28c6:	99 27       	eor	r25, r25
    28c8:	80 83       	st	Z, r24
  }

}
    28ca:	27 96       	adiw	r28, 0x07	; 7
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61
    28d6:	cf 91       	pop	r28
    28d8:	df 91       	pop	r29
    28da:	08 95       	ret

000028dc <USART_VidSendChar>:


void USART_VidSendChar(u8 Copy_u8Char)
{
    28dc:	df 93       	push	r29
    28de:	cf 93       	push	r28
    28e0:	0f 92       	push	r0
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	89 83       	std	Y+1, r24	; 0x01
    while((GET_BIT(UCSRA,UCSRA_UDRE))==0);
    28e8:	eb e2       	ldi	r30, 0x2B	; 43
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	82 95       	swap	r24
    28f0:	86 95       	lsr	r24
    28f2:	87 70       	andi	r24, 0x07	; 7
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	81 70       	andi	r24, 0x01	; 1
    28fa:	90 70       	andi	r25, 0x00	; 0
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	a1 f3       	breq	.-24     	; 0x28e8 <USART_VidSendChar+0xc>
    UDR = Copy_u8Char;
    2900:	ec e2       	ldi	r30, 0x2C	; 44
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	80 83       	st	Z, r24
}
    2908:	0f 90       	pop	r0
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <USART_VidReceiveChar>:

u8 USART_VidReceiveChar(void)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    while((GET_BIT(UCSRA,UCSRA_RXC))==0);
    2918:	eb e2       	ldi	r30, 0x2B	; 43
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	88 23       	and	r24, r24
    2920:	dc f7       	brge	.-10     	; 0x2918 <USART_VidReceiveChar+0x8>
    return UDR ;
    2922:	ec e2       	ldi	r30, 0x2C	; 44
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
}
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <USART_VidReceiveCharWith_TimeOut>:



u8 USART_VidReceiveCharWith_TimeOut(void)
{u16 Local_u8Counter=0;
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	00 d0       	rcall	.+0      	; 0x2934 <USART_VidReceiveCharWith_TimeOut+0x6>
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	1a 82       	std	Y+2, r1	; 0x02
    293a:	19 82       	std	Y+1, r1	; 0x01
    293c:	05 c0       	rjmp	.+10     	; 0x2948 <USART_VidReceiveCharWith_TimeOut+0x1a>

    while((Local_u8Counter<20000)&&((GET_BIT(UCSRA,UCSRA_RXC))==0))
    {
    	Local_u8Counter++;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	01 96       	adiw	r24, 0x01	; 1
    2944:	9a 83       	std	Y+2, r25	; 0x02
    2946:	89 83       	std	Y+1, r24	; 0x01


u8 USART_VidReceiveCharWith_TimeOut(void)
{u16 Local_u8Counter=0;

    while((Local_u8Counter<20000)&&((GET_BIT(UCSRA,UCSRA_RXC))==0))
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	2e e4       	ldi	r18, 0x4E	; 78
    294e:	80 32       	cpi	r24, 0x20	; 32
    2950:	92 07       	cpc	r25, r18
    2952:	28 f4       	brcc	.+10     	; 0x295e <USART_VidReceiveCharWith_TimeOut+0x30>
    2954:	eb e2       	ldi	r30, 0x2B	; 43
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	88 23       	and	r24, r24
    295c:	84 f7       	brge	.-32     	; 0x293e <USART_VidReceiveCharWith_TimeOut+0x10>
    {
    	Local_u8Counter++;
    }
    return UDR ;
    295e:	ec e2       	ldi	r30, 0x2C	; 44
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
}
    2964:	0f 90       	pop	r0
    2966:	0f 90       	pop	r0
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <USART_VidSendString>:

void USART_VidSendString(const u8 *Copy_pu8String)
{        u8 Local_u8Counter=0;
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	61 97       	sbiw	r28, 0x11	; 17
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	99 8b       	std	Y+17, r25	; 0x11
    2984:	88 8b       	std	Y+16, r24	; 0x10
    2986:	1f 86       	std	Y+15, r1	; 0x0f
    2988:	80 c0       	rjmp	.+256    	; 0x2a8a <USART_VidSendString+0x11c>
	while( Copy_pu8String[Local_u8Counter] != '\0' )
		{
		   USART_VidSendChar(Copy_pu8String[Local_u8Counter]);
    298a:	8f 85       	ldd	r24, Y+15	; 0x0f
    298c:	28 2f       	mov	r18, r24
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	88 89       	ldd	r24, Y+16	; 0x10
    2992:	99 89       	ldd	r25, Y+17	; 0x11
    2994:	fc 01       	movw	r30, r24
    2996:	e2 0f       	add	r30, r18
    2998:	f3 1f       	adc	r31, r19
    299a:	80 81       	ld	r24, Z
    299c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <USART_VidSendChar>
		   Local_u8Counter++;
    29a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a2:	8f 5f       	subi	r24, 0xFF	; 255
    29a4:	8f 87       	std	Y+15, r24	; 0x0f
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	8b 87       	std	Y+11, r24	; 0x0b
    29b0:	9c 87       	std	Y+12, r25	; 0x0c
    29b2:	ad 87       	std	Y+13, r26	; 0x0d
    29b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a ef       	ldi	r20, 0xFA	; 250
    29c4:	54 e4       	ldi	r21, 0x44	; 68
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8f 83       	std	Y+7, r24	; 0x07
    29d0:	98 87       	std	Y+8, r25	; 0x08
    29d2:	a9 87       	std	Y+9, r26	; 0x09
    29d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <USART_VidSendString+0x8a>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <USART_VidSendString+0x108>
	else if (__tmp > 65535)
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <USART_VidSendString+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <USART_VidSendString+0xea>
    2a3a:	88 ec       	ldi	r24, 0xC8	; 200
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <USART_VidSendString+0xd8>
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <USART_VidSendString+0xcc>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <USART_VidSendString+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6f 81       	ldd	r22, Y+7	; 0x07
    2a64:	78 85       	ldd	r23, Y+8	; 0x08
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <USART_VidSendString+0x114>
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
    return UDR ;
}

void USART_VidSendString(const u8 *Copy_pu8String)
{        u8 Local_u8Counter=0;
	while( Copy_pu8String[Local_u8Counter] != '\0' )
    2a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8c:	28 2f       	mov	r18, r24
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	88 89       	ldd	r24, Y+16	; 0x10
    2a92:	99 89       	ldd	r25, Y+17	; 0x11
    2a94:	fc 01       	movw	r30, r24
    2a96:	e2 0f       	add	r30, r18
    2a98:	f3 1f       	adc	r31, r19
    2a9a:	80 81       	ld	r24, Z
    2a9c:	88 23       	and	r24, r24
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <USART_VidSendString+0x134>
    2aa0:	74 cf       	rjmp	.-280    	; 0x298a <USART_VidSendString+0x1c>
		   USART_VidSendChar(Copy_pu8String[Local_u8Counter]);
		   Local_u8Counter++;
			  _delay_ms(1);
		}

}
    2aa2:	61 96       	adiw	r28, 0x11	; 17
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <main>:
void Leaving_Mode();
u8 Local_u8Mode=0;
u8 Bug=0;

int main()
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    /* Stepper Motor Initialization */
	Stepper_Setup(Port_D,Pin2,Pin3,Pin4); //  Pin0 >>> Direction,  Pin1 >>> Step,  Pin2 >>> Enable
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	62 e0       	ldi	r22, 0x02	; 2
    2ac0:	43 e0       	ldi	r20, 0x03	; 3
    2ac2:	24 e0       	ldi	r18, 0x04	; 4
    2ac4:	0e 94 56 10 	call	0x20ac	; 0x20ac <Stepper_Setup>
	Stepper_Setup(Port_D,Pin5,Pin6,Pin7);
    2ac8:	83 e0       	ldi	r24, 0x03	; 3
    2aca:	65 e0       	ldi	r22, 0x05	; 5
    2acc:	46 e0       	ldi	r20, 0x06	; 6
    2ace:	27 e0       	ldi	r18, 0x07	; 7
    2ad0:	0e 94 56 10 	call	0x20ac	; 0x20ac <Stepper_Setup>
	Stepper_Setup(Port_A,Pin7,Pin6,Pin5);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	67 e0       	ldi	r22, 0x07	; 7
    2ad8:	46 e0       	ldi	r20, 0x06	; 6
    2ada:	25 e0       	ldi	r18, 0x05	; 5
    2adc:	0e 94 56 10 	call	0x20ac	; 0x20ac <Stepper_Setup>
	/* Global Interrupt enable */
		   GIE_VidEnable();
    2ae0:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <GIE_VidEnable>

    /*USART Initialization */
	   DIO_VidSetPinDirection(Port_D,Pin0,Input);
    2ae4:	83 e0       	ldi	r24, 0x03	; 3
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	40 e0       	ldi	r20, 0x00	; 0
    2aea:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>
	   DIO_VidSetPinDirection(Port_D,Pin1,Output);
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	61 e0       	ldi	r22, 0x01	; 1
    2af2:	41 e0       	ldi	r20, 0x01	; 1
    2af4:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_VidSetPinDirection>
	   USART_VidIniti();
    2af8:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <USART_VidIniti>

	while(1){

	    /* Select mode  */
	 	USART_VidSendString("\n************ Welcome To Smart Park **************\n");
    2afc:	80 e6       	ldi	r24, 0x60	; 96
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 b7 14 	call	0x296e	; 0x296e <USART_VidSendString>
	 	USART_VidSendString("Choose your mode\n  a- For Park Mode\n  b- Leaving Mode\n ");
    2b04:	84 e9       	ldi	r24, 0x94	; 148
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 b7 14 	call	0x296e	; 0x296e <USART_VidSendString>
	 	USART_VidSendString("*************************************************\n");
    2b0c:	8c ec       	ldi	r24, 0xCC	; 204
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 b7 14 	call	0x296e	; 0x296e <USART_VidSendString>


	 	Local_u8Mode=USART_VidReceiveChar();
    2b14:	0e 94 88 14 	call	0x2910	; 0x2910 <USART_VidReceiveChar>
    2b18:	80 93 76 02 	sts	0x0276, r24
	 	Bug=USART_VidReceiveChar();
    2b1c:	0e 94 88 14 	call	0x2910	; 0x2910 <USART_VidReceiveChar>
    2b20:	80 93 77 02 	sts	0x0277, r24
	 	Bug=USART_VidReceiveChar();
    2b24:	0e 94 88 14 	call	0x2910	; 0x2910 <USART_VidReceiveChar>
    2b28:	80 93 77 02 	sts	0x0277, r24
	 	switch(Local_u8Mode)
    2b2c:	80 91 76 02 	lds	r24, 0x0276
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	81 36       	cpi	r24, 0x61	; 97
    2b36:	91 05       	cpc	r25, r1
    2b38:	09 f7       	brne	.-62     	; 0x2afc <main+0x48>
	 	{
	 	  case 'a': Parking_Mode();break;
    2b3a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <Parking_Mode>
    2b3e:	de cf       	rjmp	.-68     	; 0x2afc <main+0x48>

00002b40 <Parking_Mode>:

}

/* Implementation of parking function */
void Parking_Mode()
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	0f 92       	push	r0
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Cell =0;
    2b4a:	19 82       	std	Y+1, r1	; 0x01
	USART_VidSendString("\n************ Park_Mode **************\n");
    2b4c:	8f ef       	ldi	r24, 0xFF	; 255
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 b7 14 	call	0x296e	; 0x296e <USART_VidSendString>
	USART_VidSendString("\n Available Cells:\n   - 1\n - 2\n - 3");
    2b54:	87 e2       	ldi	r24, 0x27	; 39
    2b56:	91 e0       	ldi	r25, 0x01	; 1
    2b58:	0e 94 b7 14 	call	0x296e	; 0x296e <USART_VidSendString>
	USART_VidSendString("\nPlease Select The Desired Cell :\n");
    2b5c:	8b e4       	ldi	r24, 0x4B	; 75
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	0e 94 b7 14 	call	0x296e	; 0x296e <USART_VidSendString>
	Local_u8Cell=USART_VidReceiveChar();
    2b64:	0e 94 88 14 	call	0x2910	; 0x2910 <USART_VidReceiveChar>
    2b68:	89 83       	std	Y+1, r24	; 0x01
	Bug=USART_VidReceiveChar();
    2b6a:	0e 94 88 14 	call	0x2910	; 0x2910 <USART_VidReceiveChar>
    2b6e:	80 93 77 02 	sts	0x0277, r24
	Bug=USART_VidReceiveChar();
    2b72:	0e 94 88 14 	call	0x2910	; 0x2910 <USART_VidReceiveChar>
    2b76:	80 93 77 02 	sts	0x0277, r24
	while(Local_u8Cell==0);
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	88 23       	and	r24, r24
    2b7e:	e9 f3       	breq	.-6      	; 0x2b7a <Parking_Mode+0x3a>
 Cell_VidParking(Local_u8Cell);
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <Cell_VidParking>
}
    2b8a:	0f 90       	pop	r0
    2b8c:	cf 91       	pop	r28
    2b8e:	df 91       	pop	r29
    2b90:	08 95       	ret

00002b92 <__udivmodhi4>:
    2b92:	aa 1b       	sub	r26, r26
    2b94:	bb 1b       	sub	r27, r27
    2b96:	51 e1       	ldi	r21, 0x11	; 17
    2b98:	07 c0       	rjmp	.+14     	; 0x2ba8 <__udivmodhi4_ep>

00002b9a <__udivmodhi4_loop>:
    2b9a:	aa 1f       	adc	r26, r26
    2b9c:	bb 1f       	adc	r27, r27
    2b9e:	a6 17       	cp	r26, r22
    2ba0:	b7 07       	cpc	r27, r23
    2ba2:	10 f0       	brcs	.+4      	; 0x2ba8 <__udivmodhi4_ep>
    2ba4:	a6 1b       	sub	r26, r22
    2ba6:	b7 0b       	sbc	r27, r23

00002ba8 <__udivmodhi4_ep>:
    2ba8:	88 1f       	adc	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	5a 95       	dec	r21
    2bae:	a9 f7       	brne	.-22     	; 0x2b9a <__udivmodhi4_loop>
    2bb0:	80 95       	com	r24
    2bb2:	90 95       	com	r25
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	08 95       	ret

00002bba <__prologue_saves__>:
    2bba:	2f 92       	push	r2
    2bbc:	3f 92       	push	r3
    2bbe:	4f 92       	push	r4
    2bc0:	5f 92       	push	r5
    2bc2:	6f 92       	push	r6
    2bc4:	7f 92       	push	r7
    2bc6:	8f 92       	push	r8
    2bc8:	9f 92       	push	r9
    2bca:	af 92       	push	r10
    2bcc:	bf 92       	push	r11
    2bce:	cf 92       	push	r12
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	cf 93       	push	r28
    2bdc:	df 93       	push	r29
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	ca 1b       	sub	r28, r26
    2be4:	db 0b       	sbc	r29, r27
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	f8 94       	cli
    2bea:	de bf       	out	0x3e, r29	; 62
    2bec:	0f be       	out	0x3f, r0	; 63
    2bee:	cd bf       	out	0x3d, r28	; 61
    2bf0:	09 94       	ijmp

00002bf2 <__epilogue_restores__>:
    2bf2:	2a 88       	ldd	r2, Y+18	; 0x12
    2bf4:	39 88       	ldd	r3, Y+17	; 0x11
    2bf6:	48 88       	ldd	r4, Y+16	; 0x10
    2bf8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bfa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bfc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bfe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c00:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c02:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c04:	b9 84       	ldd	r11, Y+9	; 0x09
    2c06:	c8 84       	ldd	r12, Y+8	; 0x08
    2c08:	df 80       	ldd	r13, Y+7	; 0x07
    2c0a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c0c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c0e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c10:	1b 81       	ldd	r17, Y+3	; 0x03
    2c12:	aa 81       	ldd	r26, Y+2	; 0x02
    2c14:	b9 81       	ldd	r27, Y+1	; 0x01
    2c16:	ce 0f       	add	r28, r30
    2c18:	d1 1d       	adc	r29, r1
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	ed 01       	movw	r28, r26
    2c26:	08 95       	ret

00002c28 <_exit>:
    2c28:	f8 94       	cli

00002c2a <__stop_program>:
    2c2a:	ff cf       	rjmp	.-2      	; 0x2c2a <__stop_program>
